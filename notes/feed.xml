<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>
    ノート on 
    Mcho
    </title>
    <link>https://mcho.dev/notes/</link>
    <description>Recent content in ノート
    on Mcho</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
    
    <copyright>&amp;copy; mcho 2019</copyright>
    
        <atom:link href="https://mcho.dev/notes/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PrettierでSalesforceのApexファイルをフォーマット、VSCode連携も</title>
      <link>https://mcho.dev/notes/prettier%E3%81%A7salesforce%E3%81%AEapex%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88vscode%E9%80%A3%E6%90%BA%E3%82%82/</link>
      <pubDate>Tue, 02 Feb 2021 13:39:03 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/prettier%E3%81%A7salesforce%E3%81%AEapex%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88vscode%E9%80%A3%E6%90%BA%E3%82%82/</guid>
      <description><![CDATA[必要なライブラリインストールする。 Prettier · Opinionated Code Formatter dangmai/prettier-plugin-apex: Code formatter for the Apex Programming Language npm i -D prettier prettier-plugin-apex apex 向け prettier 設定を.prettierrcなどとしてプロジェクトに追加する // .prettierrc { &amp;#34;overrides&amp;#34;: [ { &amp;#34;files&amp;#34;: [&amp;#34;*.cls&amp;#34;, &amp;#34;*.trigger&amp;#34;], &amp;#34;options&amp;#34;: { &amp;#34;useTabs&amp;#34;: true } } ] } prettier のフォーマットコマンドをテ]]></description>
      <content:encoded><![CDATA[<p>必要なライブラリインストールする。</p>
<p><a href="https://prettier.io/" target="_blank" rel="nofollow noopener">Prettier · Opinionated Code Formatter</a></p>
<p><a href="https://github.com/dangmai/prettier-plugin-apex" target="_blank" rel="nofollow noopener">dangmai/prettier-plugin-apex: Code formatter for the Apex Programming Language</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D prettier prettier-plugin-apex
</code></pre></div><p>apex 向け prettier 設定を<code>.prettierrc</code>などとしてプロジェクトに追加する</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">//</span> <span class="err">.prettierrc</span>
<span class="p">{</span>
  <span class="nt">&#34;overrides&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;files&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;*.cls&#34;</span><span class="p">,</span> <span class="s2">&#34;*.trigger&#34;</span><span class="p">],</span>
      <span class="nt">&#34;options&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;useTabs&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>prettier のフォーマットコマンドをテストする。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npx prettier -c path/to/apex.cls
</code></pre></div><p>以下のメッセージが出ていれば OK</p>
<p>style 違反があるとき</p>
<pre tabindex="0"><code class="language-log" data-lang="log">Checking formatting...
[warn] path/to/apex.cls
[warn] Code style issues found in the above file(s). Forgot to run Prettier?
</code></pre><p>style 違反がないとき</p>
<pre tabindex="0"><code class="language-log" data-lang="log">Checking formatting...
All matched files use Prettier code style!
</code></pre><p>ここまででプロジェクトの Apex ファイルが prettier でフォーマットできるようになりました。</p>
<h4 id="vscode-でフォーマットする">VSCode でフォーマットする。</h4>
<p>以下の拡張機能をインストール
<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="nofollow noopener">Prettier - Code formatter - Visual Studio Marketplace</a></p>
<p><code>.vscode/settings.json</code>をに以下を追記</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;[apex]&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;editor.defaultFormatter&#34;</span><span class="p">:</span> <span class="s2">&#34;esbenp.prettier-vscode&#34;</span><span class="p">,</span>
    <span class="err">//</span> <span class="err">保存時にフォーマットする設定です。お好みにあわせて変更してください。</span>
    <span class="nt">&#34;editor.formatOnSave&#34;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>以上です。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Salesforceで開発中のスクラッチ組織を非技術者に簡単に見てもらうためにやったこと</title>
      <link>https://mcho.dev/notes/salesforce%E3%81%A7%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E9%9D%9E%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%AB%E8%A6%8B%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%9F%E3%82%81%E3%81%AB%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</link>
      <pubDate>Thu, 26 Mar 2020 17:13:09 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/salesforce%E3%81%A7%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E9%9D%9E%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%AB%E8%A6%8B%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%9F%E3%82%81%E3%81%AB%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</guid>
      <description><![CDATA[この記事は Salesforce 開発者向けブログキャンペーンへのエントリー記事です。 どうしてやろうとしたのか SFDX プロジェクトの開発中に、変更された箇所を確認するための手間を省きたいので、やろうと思いました。 どうやってやるの]]></description>
      <content:encoded><![CDATA[<p>この記事は Salesforce 開発者向けブログキャンペーンへのエントリー記事です。</p>
<h2 id="どうしてやろうとしたのか">どうしてやろうとしたのか</h2>
<p>SFDX プロジェクトの開発中に、変更された箇所を確認するための手間を省きたいので、やろうと思いました。</p>
<h2 id="どうやってやるのか">どうやってやるのか</h2>
<p>プロジェクトの内容が変更されたら、自動的にスクラッチ組織を作成して、Slack に通知する、という流れです。
今回のプロジェクトは GitHub で管理されているため、具体的には以下の流れでやりました。</p>
<ol>
<li>GitHub の master ブランチが更新される</li>
<li>変更されたソースを元にスクラッチ組織を作成/セットアップする</li>
<li>Slack にスクラッチ組織のログイン URL を通知する</li>
</ol>
<p>詳しい手順はそれぞれ、<a href="https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/">GitHubActions でスクラッチ組織を作成する</a>と<a href="https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/">GitHubActions から Slack へメッセージを送信する</a>に書いてあります。この記事は二つの記事をまとめたものになります。</p>
<h2 id="プロジェクトの状態">プロジェクトの状態</h2>
<ul>
<li>GitHub の private リポジトリで管理されている</li>
<li>セットアップはコマンドで完結できる</li>
<li>npm パッケージを含んでいる</li>
</ul>
<h2 id="実現するまでにやったこと">実現するまでにやったこと</h2>
<h3 id="githubactions-でスクラッチ組織を作成する">GitHubActions でスクラッチ組織を作成する</h3>
<p>まずは、GitHubActions で<a href="https://developer.salesforce.com/ja/tools/sfdxcli" target="_blank" rel="nofollow noopener">Salesforce CLI</a>を使えるようにするために <code>package.json</code> の <code>devDependencies</code> に含めます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D sfdx-cli
</code></pre></div><p>次に、 DevHub が有効になっている組織の認証を得る必要があります。コマンドライン上で完結する認証コマンドは<code>force:auth:sfdxurl:store</code>です。これを使うために。<code>Sfdx Auth Url</code>を以下のコマンドで表示、コピーして GitHub の Secrets に登録します。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## 事前にDevHubを使用する組織にログインしておいてください</span>
sfdx force:org:display --verbose -u ForGitHubAction
</code></pre></div><p>Secrets の登録は GitHub のリポジトリページの Settings &gt; Secrets からできます。</p>
<p>


<picture>
  <img src="/img/2020-03-03-17-01-54.png" alt="Secrets画面" decoding="async" loading="lazy">
</picture>
</p>
<p>最後に、スクラッチ組織を作成する GitHubActions のワークフローを作成して準備は完了です。以下のコードを<code>.github/workflows/create-scratch-org.yml</code>に貼り付けてコミットプッシュします。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織のログインURLをSlackに通知する</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースコードをチェックアウトする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">          </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">          </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            npm-${{ env.app-cache-name }}-
</span><span class="sd">            npm-</span><span class="w">            
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ secrets.DEVHUB_SFDX_URL }} &gt; ./SFDX_AUTH_URL.txt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織にログインする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織を作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">make-login-url</span><span class="w">
</span><span class="w">        </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">          INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">          USER_NAME=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .username))
</span><span class="sd">          PASSWORD=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .password))
</span><span class="sd">          echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">          
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ steps.make-login-url.outputs.login-url }}</span><span class="w">
</span></code></pre></div><p>うまくいくと Actions のログにログイン URL が表示されます。</p>
<h3 id="slack-へログイン-url-を通知する">Slack へログイン URL を通知する</h3>
<p>このログイン URL を Slack に通知するために、<a href="https://github.com/pullreminders/slack-action" target="_blank" rel="nofollow noopener">pullreminders/slack-action: GitHub Action for posting Slack messages</a>を使います。セットアップ手順はリンク先にもありますのでそちらも参考にしてください。</p>
<p>それではセットアップしていきます。</p>
<h4 id="slack-app-を作成">Slack App を作成</h4>
<p><a href="https://api.slack.com/apps" target="_blank" rel="nofollow noopener">Slack API: Applications | Slack</a>を開いて<code>Create New App</code>ボタンをクリックしてアプリを作成します。今回は AppName を<code>GABot</code>としました。Slack ワークスペースは適宜追加したい場所を選択してください。</p>
<p>メッセージ送信ができるようにアプリに Bot 用の機能を追加します。アプリの Basic Information ページの上部アコーディオンを開き<code>Bots</code>をクリックすると追加できます。</p>
<p>※画像は設定済みのものになります</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-06-13.png" alt="bot権限を付与" decoding="async" loading="lazy">
</picture>
</p>
<p>Slack ワークスペースに アプリをインストールします。



<picture>
  <img src="/img/2020-03-24-16-08-09.png" alt="Slackワークスペースにインストール" decoding="async" loading="lazy">
</picture>
</p>
<p>※private チェンネルの場合は、チャンネルの詳細タブを開いてそこからアプリをインストールしてください。</p>
<h4 id="slack-app-の-bot-user-oauth-access-token-トークンを-github-に登録">Slack App の Bot User OAuth Access Token トークンを GitHub に登録</h4>
<p>アプリの OAuth &amp; Permissions ページの Bot User OAuth Access Token をコピーして</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-19-59.png" alt="Bot User OAuth Access Token" decoding="async" loading="lazy">
</picture>
</p>
<p>GitHub の Secrets に登録します。</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-22-21.png" alt="GitHubのSecretsに登録" decoding="async" loading="lazy">
</picture>
</p>
<h3 id="github-actions-のワークフローを作成">GitHub Actions のワークフローを作成</h3>
<p>簡単なメッセージを送信するワークフローで試してみます。<code>.github/workflows/hello-slack.yml</code>を作成して、以下をコピペします。コピペしたら一番下の行の<code>\&quot;channel\&quot;:\&quot;GM84QDF1P\&quot;</code>を投稿したいチャンネル ID に書き換えます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GABotでHelloSlack</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hello-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Hello Slack&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@master</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{\&#34;channel\&#34;:\&#34;GM84QDF1P\&#34;,\&#34;text\&#34;:\&#34;Hello world\&#34;}&#39;</span><span class="w">
</span></code></pre></div><p>args に指定するメッセージのフォーマットは<a href="https://api.slack.com/reference/surfaces/formatting" target="_blank" rel="nofollow noopener">Formatting text for app surfaces | Slack</a>を参考に、適宜調節します。<br>
以上で GithubActions から Slack へのメッセージ送信の準備はできました。あとは、master ブランチにコミットして push して、Slack チャンネルにメッセージが投稿されることを確認したら完了です。</p>
<p>


<picture>
  <img src="/img/2020-03-27-15-23-30.png" alt="Hello Slack" decoding="async" loading="lazy">
</picture>
</p>
<h2 id="完成したワークフロー">完成したワークフロー</h2>
<p>上記二つのワークフローが、うまく動くことを確かめたら、二つをマージします。完成したワークフローは以下になります、ファイル名をわかりやすく<code>.github/workflows/create-scratch-org-and-notification-to-slack.yml</code>として保存しました。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織のログインURLをSlackに通知する</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org-and-notification-to-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースコードをチェックアウトする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">          </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">          </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            npm-${{ env.app-cache-name }}-
</span><span class="sd">            npm-</span><span class="w">            
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ secrets.DEVHUB_SFDX_URL }} &gt; ./SFDX_AUTH_URL.txt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織にログインする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織を作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">make-login-url</span><span class="w">
</span><span class="w">        </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">          INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">          USER_NAME=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .username))
</span><span class="sd">          PASSWORD=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .password))
</span><span class="sd">          echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">          
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ログインURLをスラックに通知する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@v1.0.7</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{
</span><span class="s1">            \&#34;channel\&#34;: \&#34;GM84QDF1P\&#34;,
</span><span class="s1">            \&#34;attachments\&#34;: [
</span><span class="s1">              {
</span><span class="s1">                \&#34;fallback\&#34;: \&#34;メッセージの投稿に失敗しました...\&#34;,
</span><span class="s1">                \&#34;color\&#34;: \&#34;#36a64f\&#34;,
</span><span class="s1">                \&#34;title\&#34;: \&#34;masterブランチが更新されました！\&#34;,
</span><span class="s1">                \&#34;text\&#34;: \&#34;下記URLからスクラッチ組織にログインすることが出来ます。\n${{ steps.make-login-url.outputs.login-url }}\&#34;
</span><span class="s1">              }
</span><span class="s1">            ]
</span><span class="s1">          }&#39;</span><span class="w">
</span></code></pre></div><p>これをコミットして master ブランチ更新して push すると、ログイン URL を含んだ以下のメッセージが指定の Slack チャンネルに送られてくれば完成です！</p>
<p>


<picture>
  <img src="/img/2020-03-27-15-58-51.png" alt="ログインURLをSlackに通知" decoding="async" loading="lazy">
</picture>
</p>
<h2 id="終わり">終わり</h2>
<p>以上です、Slack からこのワークフローをトリガーできたりしたら更に便利になりそうです。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>@angular-eslint/angular-eslintでAngularのLinterをTSLintからESLintに置き換えてみた</title>
      <link>https://mcho.dev/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 16 Mar 2020 12:06:21 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description><![CDATA[モチベーション 各所で TSLint から ESLint の移行が進んでるのと、VSCode の ESLint フォーマッターを使いたかった。 移行手順 ng newしたところから始めます。AngularCLI のバージョンは9.0.6でした。 パッケージの]]></description>
      <content:encoded><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>各所で TSLint から ESLint の移行が進んでるのと、VSCode の ESLint フォーマッターを使いたかった。</p>
<h2 id="移行手順">移行手順</h2>
<p><code>ng new</code>したところから始めます。AngularCLI のバージョンは<code>9.0.6</code>でした。</p>
<h3 id="パッケージのインストール">パッケージのインストール</h3>
<p>まず、<code>eslint</code>と<code>@angular-eslint</code>関連のパッケージをインストールします。
<a href="https://github.com/angular-eslint/angular-eslint" target="_blank" rel="nofollow noopener">angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D eslint <span class="se">\
</span><span class="se"></span>  @angular-eslint/builder <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin <span class="se">\
</span><span class="se"></span>  @angular-eslint/template-parser <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin-template
</code></pre></div><h3 id="コマンドと-eslint-の設定を修正">コマンドと ESLint の設定を修正</h3>
<p>前述したリポジトリに手順もありますが、各設定ファイルのサンプルがあったので、それを参考に<code>angular.json</code>を修正、**<code>.eslintrc.js</code>**を追加しました。angular.json の差分はこんな感じ<br>



<picture>
  <img src="/img/2020-03-16-12-41-16.png" alt="angular.jsonの差分" decoding="async" loading="lazy">
</picture>
</p>
<p><code>.eslint.js</code>のサンプルは
<a href="https://github.com/angular-eslint/angular-eslint/blob/master/packages/integration-tests/fixtures/angular-cli-workspace/.eslintrc.js" target="_blank" rel="nofollow noopener">ここ</a>からいただきました。</p>
<p>また、この<code>.eslint.js</code>を使うために、<code>@typescript-eslint</code>関連のパッケージが必要なので以下のコマンドでインストールします。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser
</code></pre></div><p>ここまでで<code>ng lint</code>は動くようになるはずです。手元の環境では、<code>app.component.spec.ts</code>でクオートのエラーがでました。</p>
<h2 id="vscode-でも動かしてみる">VSCode でも動かしてみる</h2>
<p>設定されてるルールが適用されてるか見てみます。サンプルにあった<code>'@typescript-eslint/no-non-null-assertion': 'error'</code>で試してみます。</p>
<p>


<picture>
  <img src="/img/2020-03-16-18-37-21.png" alt="&#39;@typescript-eslint/no-non-null-assertion&#39;: &lsquo;error&rsquo;" decoding="async" loading="lazy">
</picture>
</p>
<p>無事 Lint されていました。また、画像や動画をとっていないですが、<code>ESLint: Fix all auto-fixable Problems</code>も効きました。</p>
<h2 id="終わり">終わり</h2>
<p>Angular 本体の ESLint 対応も待ち遠しいですが、<code>@angular-eslint/angular-eslint</code>はルールも順次対応していくようなので、とりあえずこちらで良さそうですね</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Auraコンポーネントから特定フィールドのPickListValuesを取得する</title>
      <link>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 09 Mar 2020 15:54:48 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[やりたいこと Aura コンポーネントからオブジェクトの PickList フィールドの PickListValues を取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。 取得する ui-api か Apex コントローラーで取得できそう。ui-api は試し]]></description>
      <content:encoded><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>
<p>Aura コンポーネントからオブジェクトの PickList フィールドの PickListValues を取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。</p>
<h2 id="取得する">取得する</h2>
<p>ui-api か Apex コントローラーで取得できそう。ui-api は試したら CSP が必要だったので、Apex コントローラーで取得する。</p>
<p>単純にやると、<code>Account.Salutation.getDescribe().getPicklistValues()</code>でできる。</p>
<p>汎用的にするには</p>
<pre tabindex="0"><code class="language-apex" data-lang="apex">SObject sObj = (SObject)Type.forName(sObjectName).newInstance();
Schema.DescribeSObjectResult describeSObj = sObj.getSObjectType().getDescribe();
Schema.SObjectField field = describeSObj.fields.getMap().get(fieldName);
field.getDescribe().getPicklistValues();
</code></pre><p>という感じになる。<code>Schema.DescribeSObjectResult</code>の<code>fields.getMap().get(fieldName)</code>で<code>SObjectField</code>を取得するところが味噌っぽい</p>
<h2 id="参考">参考</h2>
<p><a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_api_calls_platform.htm" target="_blank" rel="nofollow noopener">Making API Calls from Components | Lightning Aura Components Developer Guide | Salesforce Developers</a><br>
<a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm" target="_blank" rel="nofollow noopener">DescribeSObjectResult クラス | Apex 開発者ガイド | Salesforce Developers</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>GitHubActionsからSlackへメッセージを送信する</title>
      <link>https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link>
      <pubDate>Fri, 06 Mar 2020 17:34:24 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[どうしてやるの GitHubActions で Salesforce のスクラッチ組織を作成するのワークフローから Slack にログイン URL を送りたかった。 なにを使うか pullreminders/slack-action: GitHub Action for posting Slack messagesを使うことにした。 今気づいたんですが、これ PullPanda のリポジトリだ セットア]]></description>
      <content:encoded><![CDATA[<h2 id="どうしてやるの">どうしてやるの</h2>
<ul>
<li><a href="https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/">GitHubActions で Salesforce のスクラッチ組織を作成する</a>のワークフローから Slack にログイン URL を送りたかった。</li>
</ul>
<h2 id="なにを使うか">なにを使うか</h2>
<p><a href="https://github.com/pullreminders/slack-action" target="_blank" rel="nofollow noopener">pullreminders/slack-action: GitHub Action for posting Slack messages</a>を使うことにした。<br>
今気づいたんですが、これ PullPanda のリポジトリだ</p>
<h2 id="セットアップ">セットアップ</h2>
<p>上記リポジトリの手順通り進める。流れは</p>
<ol>
<li>Slack App を作成</li>
<li>Slack App トークンを GitHub に登録</li>
<li>GitHub Actions のワークフローを作成</li>
</ol>
<p>です、詳しくは前述したリポジトリの方見てください。</p>
<h2 id="セットアップしていく">セットアップしていく</h2>
<h3 id="1-slack-app-を作成">1. Slack App を作成</h3>
<p><a href="https://api.slack.com/apps" target="_blank" rel="nofollow noopener">Slack API: Applications | Slack</a>を開いて<code>Create New App</code>ボタンをクリックしてアプリを作成します。今回は AppName を<code>GABot</code>としました。Slack ワークスペースは追加したい場所を選択してください。</p>
<p>メッセージ送信ができるようにアプリに Bot 用の機能を追加します。アプリの Basic Information ページの上部アコーディオンを開き<code>Bots</code>をクリックすると追加できます。</p>
<p>※画像は設定済みのものになります</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-06-13.png" alt="bot権限を付与" decoding="async" loading="lazy">
</picture>
</p>
<p>Slack ワークスペースに アプリをインストールします。



<picture>
  <img src="/img/2020-03-24-16-08-09.png" alt="Slackワークスペースにインストール" decoding="async" loading="lazy">
</picture>
</p>
<p>※private チェンネルの場合は、チャンネルの詳細タブを開いてそこからアプリをインストールしてください。</p>
<h3 id="2-slack-app-の-bot-user-oauth-access-token-を-github-に登録">2. Slack App の Bot User OAuth Access Token を GitHub に登録</h3>
<p>アプリの OAuth &amp; Permissions ページの Bot User OAuth Access Token をコピーして</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-19-59.png" alt="Bot User OAuth Access Token" decoding="async" loading="lazy">
</picture>
</p>
<p>GitHub の Secrets に登録します。</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-22-21.png" alt="GitHubのSecretsに登録" decoding="async" loading="lazy">
</picture>
</p>
<h3 id="3-github-actions-のワークフローを作成">3. GitHub Actions のワークフローを作成</h3>
<p>簡単なメッセージを送信するワークフローで試してみます。<code>.github/workflows</code>に <code>hello-slack.yml</code>を作成して、以下をコピペします。コピペしたら一番下の行の<code>\&quot;channel\&quot;:\&quot;GM84QDF1P\&quot;</code>を投稿したいチャンネル ID に書き換えます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GABotでHelloSlack</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hello-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Hello Slack&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@master</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{\&#34;channel\&#34;:\&#34;GM84QDF1P\&#34;,\&#34;text\&#34;:\&#34;Hello Slack\&#34;}&#39;</span><span class="w">
</span></code></pre></div><p>以上で GithubActions から Slack へのメッセージ送信の準備はできました。あとは、master ブランチにコミットして push して、Slack チャンネルにメッセージが投稿されることを確認したら完了です。</p>
<h2 id="終わり">終わり</h2>
<p>あとは色々組み合わせよう</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Aura コンポーネントのため Lightning データサービスの基本</title>
      <link>https://mcho.dev/notes/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Wed, 04 Mar 2020 17:47:57 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/aura-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%81%9F%E3%82%81-lightning-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description><![CDATA[やる前 force:recordDataを使うと楽にデータを取得、操作できるということでやってみる。 メモ &amp;lt;aura:component implements=&amp;quot;flexipage:availableForRecordHome, force:hasRecordId&amp;quot;&amp;gt;のように、implements がないと LightningAppBuilder]]></description>
      <content:encoded><![CDATA[<h2 id="やる前">やる前</h2>
<p><code>force:recordData</code>を使うと楽にデータを取得、操作できるということでやってみる。</p>
<h2 id="メモ">メモ</h2>
<p><code>&lt;aura:component implements=&quot;flexipage:availableForRecordHome, force:hasRecordId&quot;&gt;</code>のように、implements がないと LightningAppBuilder でレコードページへ追加する際に表示されない、ハマった。また、<code>force:hasRecordId</code>は<code>v.recordId</code>にアクセスできることを明示できる。<a href="https://developer.salesforce.com/docs/component-library/bundle/force:hasRecordId/documentation" target="_blank" rel="nofollow noopener">force:hasRecordId - documentation - Salesforce Lightning Component Library</a><br>
レコードの保存はこんな感じの関数をボタンのクリック等に紐付けておこなう。<code>recordLoader</code>は<code>force:recordData</code>の<code>aura:id</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">({</span>
    <span class="nx">save</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cmp</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">helper</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">recordLoader</span> <span class="o">=</span> <span class="nx">cmp</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&#34;recordLoader&#34;</span><span class="p">);</span>
        <span class="nx">recordLoader</span><span class="p">.</span><span class="nx">saveRecord</span><span class="p">(</span><span class="nx">$A</span><span class="p">.</span><span class="nx">getCallback</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">saveResult</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">saveResult</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="s2">&#34;ERROR&#34;</span><span class="p">)</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="p">...</span>
            <span class="p">}</span>
        <span class="p">}));</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>GitHubActionsでSalesforceのスクラッチ組織を作成する</title>
      <link>https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 27 Feb 2020 16:05:09 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[どうしてやるの ワンアクションで確認用のスクラッチ組織を作成できるワークフローがほしかった。 GitHubActions が正式リリースされた。 ワークフローの流れ ソースをチェックアウト SFDX のセットアップ DevHub 認証 スクラッチ組織を作成、セ]]></description>
      <content:encoded><![CDATA[<h2 id="どうしてやるの">どうしてやるの</h2>
<ul>
<li>ワンアクションで確認用のスクラッチ組織を作成できるワークフローがほしかった。</li>
<li>GitHubActions が正式リリースされた。</li>
</ul>
<h2 id="ワークフローの流れ">ワークフローの流れ</h2>
<ol>
<li>ソースをチェックアウト</li>
<li>SFDX のセットアップ</li>
<li>DevHub 認証</li>
<li>スクラッチ組織を作成、セットアップ</li>
<li>ログイン用の URL を表示する</li>
</ol>
<h2 id="完成品">完成品</h2>
<p>完成品のコードです、このままコピペするだけじゃ使えません。<code>2. SFDXのセットアップ</code>と<code>3. DevHubへログインする</code>をする必要があります。<br>
フック条件は master ブランチの push になっています。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織を作成する</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">          </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">          </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            npm-${{ env.app-cache-name }}-
</span><span class="sd">            npm-</span><span class="w">            
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;sfdxが使えるかテスト&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx --help</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ secrets.SFDX_AUTH_URL }} &gt; ./SFDX_AUTH_URL.txt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織の認証を得る&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織の作成&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">          INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">          USER_NAME=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1].strip(&#39;\&#34;&#39;))) $(echo $ORG_INFO | jq .username))
</span><span class="sd">          PASSWORD=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1].strip(&#39;\&#34;&#39;))) $(echo $ORG_INFO | jq .password))
</span><span class="sd">          echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">          
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ steps.make-login-url.outputs.login-url }}</span><span class="w">
</span></code></pre></div><h2 id="各ステップについてなど">各ステップについてなど</h2>
<h3 id="ファイル作成と-1-ソースコードのチェックアウト">ファイル作成と 1. ソースコードのチェックアウト</h3>
<p><a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file" target="_blank" rel="nofollow noopener">ワークフローを設定する - GitHub ヘルプ</a>に沿って<code>.github/workflows</code>フォルダ内へ適当にワークフローファイルを設置します。今回は<code>create-scratch-org.yml</code>とします。<br>
ついでにソースコードのチェックアウトまで書いてしまいます。<a href="https://github.com/actions/checkout" target="_blank" rel="nofollow noopener">actions/checkout@v2</a>はデフォルトで master ブランチを、push 等のブランチ系アクション場合は対象ブランチをチェックアウトします。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織を作成します。</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></code></pre></div><h3 id="2-sfdx-のセットアップ">2. SFDX のセットアップ</h3>
<p>SFDX とは<a href="https://developer.salesforce.com/ja/tools/sfdxcli" target="_blank" rel="nofollow noopener">Salesforce CLI</a>のことです、<code>Salesforce</code>がコマンドライン上から操作できるものです。<br>
通常のセットアップでは、上記リンクからダウンロードしてインストール、npm や brew によるインストールがあります。GitHubActions のワークフロー上でも同様の手順でセットアップできます。<br>
今回は npm を使います。そのため<code>package.json</code>を作成する必要がありますが、これが嫌な場合や、npm が使えない場合は<a href="https://github.com/sfdx-actions/setup-sfdx" target="_blank" rel="nofollow noopener">sfdx-actions/setup-sfdx</a>や<a href="https://github.com/forcedotcom/salesforcedx-actions" target="_blank" rel="nofollow noopener">forcedotcom/salesforcedx-actions</a>を使うのも良さそうです。<br>
npm で sfdx をインストールするためには以下のコマンドをたたきます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## package.jsonが存在しない場合は作成する</span>
npm init --yes

npm i -D sfdx
</code></pre></div><p>すると<code>package.json</code>と<code>package-lock.json</code>が追加されているはずなのでコミットなりステージングなりしておきます。</p>
<p>ワークフローの steps を追記します。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Checkout source code&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあれば使う&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">        </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">        </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          npm-${{ env.app-cache-name }}-
</span><span class="sd">          npm-</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;sfdxが使えるかテスト&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx --help</span><span class="w">
</span></code></pre></div><p>これで sfdx コマンドがワークフロー上で使えるようになりました。</p>
<h3 id="3-devhub-認証">3. DevHub 認証</h3>
<p>DevHub の用意が必要です。<a href="https://developer.salesforce.com/docs/atlas.ja-jp.sfdx_setup.meta/sfdx_setup/sfdx_setup_enable_devhub.html" target="_blank" rel="nofollow noopener">組織での Dev Hub の有効化 | Salesforce DX 設定ガイド | Salesforce Developers</a><br>
sfdx でコマンドラインで完結する認証コマンドは<code>force:auth:sfdxurl:store</code>のみ？のようなのでこれを使います。このコマンドは<code>Sfdx Auth Url</code>を使うため、手元の環境で組織の認証をしておく必要があります。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## DevHubを使う組織を認証する。</span>
sfdx force:auth:web:login -a ForGitHubAction

<span class="c1">## --verboseを付けるとSfdx Auth Urlが表示されます</span>
sfdx force:org:display --verbose -u ForGitHubAction
</code></pre></div><p><code>Sfdx Auth Url</code>をコピペして、GitHub リポジトリの Secrets に登録しておきます。ワークフローファイルや、リポジトリ内ファイルへのベタ書きはやめたほうが良さそうです。Secrets については<a href="https://help.github.com/ja/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#using-encrypted-secrets-in-a-workflow" target="_blank" rel="nofollow noopener">暗号化されたシークレットの作成と保存 - GitHub ヘルプ</a>を。<br>
Secrets の登録は GitHub のリポジトリページの Settings &gt; Secrets からできます。</p>
<p>


<picture>
  <img src="/img/2020-03-03-17-01-54.png" alt="Secrets画面" decoding="async" loading="lazy">
</picture>
</p>
<p>Name はワークフローからの呼び出しの際に使うのでわかりやすいものを、今回は<code>SFDX_AUTH_URL</code>としました。<br>
ワークフローファイルを追記します。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># 省略</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;echo ${{ secrets.SFDX_AUTH_URL }} &gt; ./SFDX_AUTH_URL.txt&#39;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織の認証を得る&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d&#39;</span><span class="w">
</span></code></pre></div><h3 id="4-スクラッチ組織を作成セットアップ">4. スクラッチ組織を作成、セットアップ</h3>
<p>スクラッチ組織のセットアップを行います。例としてはこんな感じになるかと思います。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># 省略</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織の作成&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span></code></pre></div><p>スクラッチ組織は作成上限があるので、期限は一日としています。<br>
<code>config/project-scratch-def.json</code>がない場合は、<a href="https://developer.salesforce.com/docs/atlas.ja-jp.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file_config_values.htm" target="_blank" rel="nofollow noopener">スクラッチ組織定義の設定値</a>を参考にしてください。一応下に最低限の物を置いておきます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json:config/project-scratch-def.json" data-lang="json:config/project-scratch-def.json"><span class="p">{</span>
  <span class="nt">&#34;orgName&#34;</span><span class="p">:</span> <span class="s2">&#34;testOrg&#34;</span><span class="p">,</span>
  <span class="nt">&#34;edition&#34;</span><span class="p">:</span> <span class="s2">&#34;Developer&#34;</span><span class="p">,</span>
  <span class="nt">&#34;features&#34;</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div><h3 id="5-ログイン用の-url-を表示する">5. ログイン用の URL を表示する</h3>
<p>確認しやすくするために、ログイン用の URL も表示しておきます。<br>
<code>sfdx force:org:open -r</code>でインスタントなログイン URL を取得できますが、恒久的にログインしたかったので、そちらも載せています。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml:create-scratch-org.yml" data-lang="yml:create-scratch-org.yml"><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">  </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># 省略</span><span class="w">
</span><span class="w">    </span><span class="c">## 期限が短いログインURLを表示</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ログインURLの表示、期限が短い&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:open -r -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">## 期限のないログインURLを作成する</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">        ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">        INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">        USER_NAME=$(echo $ORG_INFO | jq .username)
</span><span class="sd">        PASSWORD=$(echo $ORG_INFO | jq .password)
</span><span class="sd">        echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})</span><span class="w">        
</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ steps.make-login-url.outputs.login-url }}</span><span class="w">
</span></code></pre></div><h2 id="おわりに">おわりに</h2>
<p>日毎にスクラッチ組織の作成数上限があるので、プルリク push でトリガしたりする際は注意が必要ですが、Apex テストまでやってくれると結構便利になると思います。<br>
あとはこのワークフローを Slack 連携させて拡張したりします。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Auraコンポーネントの使い方</title>
      <link>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</link>
      <pubDate>Fri, 21 Feb 2020 16:10:26 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/</guid>
      <description><![CDATA[Hoge.cmp: View テンプレートファイル、変数の定義やライフサイクルへの関数のハンドルもやる HogeController.js: cmpファイルでcから呼び出せる HogeHelper.js: HogeController.jsのdoInit: function(component, event, helper) { ... }のhelperに渡される。]]></description>
      <content:encoded><![CDATA[<p><code>Hoge.cmp</code>: View テンプレートファイル、変数の定義やライフサイクルへの関数のハンドルもやる
<code>HogeController.js</code>: <code>cmpファイル</code>で<code>c</code>から呼び出せる
<code>HogeHelper.js</code>: <code>HogeController.js</code>の<code>doInit: function(component, event, helper) { ... }</code>の<code>helper</code>に渡される。</p>
<h2 id="hogecmp">Hoge.cmp</h2>
<ul>
<li>レコードのデータは<code>{! v.simpleRecord.Name }</code>のような感じでアクセスできる
<ul>
<li>action で開いたモーダル内のコンポーネントだと<code>v.simpleRecord</code>と<code>v.record</code>は<code>undefined</code>だった</li>
</ul>
</li>
<li>コントローラーのメソッドには<code>c</code>からアクセスできる。
<ul>
<li><code>&lt;aura:component controller=“DirectoryConversionController”&gt;</code>とすると<code>@AuraEnabled</code>のメソッドが<code>c</code>から呼べる。c は<code>Controller.js</code>の関数も含む。ハマった</li>
</ul>
</li>
</ul>
<h2 id="hogecontrollerjs--hogehelperjs">HogeController.js | HogeHelper.js</h2>
<p>コントローラーの関数は 3 つの引数がデフォルトで用意されている。<code>doInit: function(component, event, helper) { ... }</code>。<br>
<code>Hoge.cmp</code>の<code>{! v.simpleRecord }</code>といった変数には、<code>component.get('v.simpleRecord')</code>,<code>component.set('v.AnyAttr', 'any')</code>といった感じでアクセス可能。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.lightning.meta/lightning/js_helper.htm" target="_blank" rel="nofollow noopener">コンポーネントのバンドル内の JavaScript コードの共有 | Lightning Aura Components Developer Guide (Lightning Aura コンポーネント開発者ガイド) | Salesforce Developers</a></li>
<li><code>$A</code>はデフォルトのネームスペース <a href="https://developer.salesforce.com/forums/?id=9060G0000005UinQAE" target="_blank" rel="nofollow noopener">What is $A and $A.util in lightning ? - Salesforce Developer Community</a></li>
<li>レコードのデータは<code>{! v.simpleRecord.Name }</code>のような感じでアクセスできる
<ul>
<li>action で開いたモーダル内のコンポーネントだと<code>v.simpleRecord</code>と<code>v.record</code>は<code>undefined</code>だった</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Lightning Experience のリードと商談</title>
      <link>https://mcho.dev/notes/lightning-experience-%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%89%E3%81%A8%E5%95%86%E8%AB%87/</link>
      <pubDate>Wed, 19 Feb 2020 17:28:59 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/lightning-experience-%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%89%E3%81%A8%E5%95%86%E8%AB%87/</guid>
      <description><![CDATA[始める前 リードは、取引先、取引先責任者、商談に一方向に変換できる、それくらいの認識。 とくにどのレコードが具体的にどこで使われるのか、意味を持っているのかは理解していない。 メモ リードとは、潜在的な顧客と]]></description>
      <content:encoded><![CDATA[<h2 id="始める前">始める前</h2>
<p>リードは、取引先、取引先責任者、商談に一方向に変換できる、それくらいの認識。
とくにどのレコードが具体的にどこで使われるのか、意味を持っているのかは理解していない。</p>
<h2 id="メモ">メモ</h2>
<p>リードとは、潜在的な顧客として認識された人や会社。まだ顧客にはなっていないけど、なる可能性がある。<br>
リードを使用すると、見込み客を区別することが簡単にできる。</p>
<p>リードレコードを作って、レコードページから取引の開始をクリックすると取引先、取引責任者、商談へ変換できるモーダルが開く



<picture>
  <img src="/img/2020-02-19-18-09-22.png" alt="変換できるモーダル" decoding="async" loading="lazy">
</picture>
</p>
<p>取引先責任者は商談に紐付けることができ、これでどの責任者とやり取りしているか明確になる。<br>
取引先は、取引先責任者が所属している組織のこと</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>LWCの基本</title>
      <link>https://mcho.dev/notes/lwc%E3%81%AE%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Wed, 15 Jan 2020 16:58:28 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/lwc%E3%81%AE%E5%9F%BA%E6%9C%AC/</guid>
      <description><![CDATA[はじめに LWC を使いそうなので基本をやる。所謂 WebComponents が中身になってるってことはどこかでみた。 トレイルがあったので、これをやる。 Lightning Web コンポーネントの作成 | Salesforce Trailhead Lightning Web コンポーネントの作成 LightningEleme]]></description>
      <content:encoded><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>LWC を使いそうなので基本をやる。所謂 WebComponents が中身になってるってことはどこかでみた。</p>
<p>トレイルがあったので、これをやる。
<a href="https://trailhead.salesforce.com/ja/content/learn/trails/build-lightning-web-components" target="_blank" rel="nofollow noopener">Lightning Web コンポーネントの作成 | Salesforce Trailhead</a></p>
<h2 id="lightning-web-コンポーネントの作成">Lightning Web コンポーネントの作成</h2>
<ul>
<li><code>LightningElement</code>が LWC の実装っぽい。<code>HTMLElement</code>をラップしてそう</li>
</ul>
<p>前から 3 つ終わったけど、大体開発環境とかの話だったな</p>
<h2 id="所感">所感</h2>
<p>やり終わってしまったので所感を書く。雑メモは社スラックに投稿していたので気が向いたらこっちにまとめる。
Web 標準に準拠して作られているので、最近の javascript フロントエンドライブラリを触っていれば、固有の API やアノテーションはあるけど、抵抗はすくないと感じた。モジュールをなぞってコードを読んだだけなので、やりたいことに向けてコードをいじったときに色々気づくかもしれない。
Salesforce のコンポーネントとしてしか利用出来ないのが惜しいなと、Web のどこにでも入れられるような感じに想像していたのでちょっとがっかり。
Salesforce のコンポーネントをモダンな javascript で書けるのは良い。出来ることは Aura には追いついていないらしいけど、API 等の対応も進んでいるので今後はこっちが主流になっていくのかな。
トレイルに関しては、熊追跡アプリの作成のモジュールが参考になった。その他は SFDX だったり環境構築のことが大半をしめていた。</p>
<h2 id="さいごに">さいごに</h2>
<p>日本語で PG 組織を作成すると Trailhead のステップで、ホームの API 名が違って完了しないので注意</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[読んでいる]DL版 RustではじめるOpenGL</title>
      <link>https://mcho.dev/notes/dl%E7%89%88rust%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8Bopengl/</link>
      <pubDate>Tue, 12 Nov 2019 15:27:44 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/dl%E7%89%88rust%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8Bopengl/</guid>
      <description><![CDATA[[DL 版] Rust ではじめる OpenGL - toyamaguchi - BOOTH]]></description>
      <content:encoded><![CDATA[<h2 id="dl-版-rust-ではじめる-opengl---toyamaguchi---boothhttpstoyamaguchiboothpmitems1557536"><a href="https://toyamaguchi.booth.pm/items/1557536" target="_blank" rel="nofollow noopener">[DL 版] Rust ではじめる OpenGL - toyamaguchi - BOOTH</a></h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>Rustで始めるOpenGLをやっている</title>
      <link>https://mcho.dev/notes/rust%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8Bopengl/</link>
      <pubDate>Tue, 12 Nov 2019 15:23:06 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/rust%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8Bopengl/</guid>
      <description><![CDATA[これはなに [DL 版] Rust ではじめる OpenGL - toyamaguchi - BOOTHをなぞった際のメモです。 目次を読む ライブラリごとに章が区切られている 環境準備 SDL OpenGL Dear ImGui 3D オブジェクト テクスチャ ほとんど触れたことがないな、とりあえず上からや]]></description>
      <content:encoded><![CDATA[<h2 id="これはなに">これはなに</h2>
<p><a href="https://toyamaguchi.booth.pm/items/1557536" target="_blank" rel="nofollow noopener">[DL 版] Rust ではじめる OpenGL - toyamaguchi - BOOTH</a>をなぞった際のメモです。</p>
<h2 id="目次を読む">目次を読む</h2>
<p>ライブラリごとに章が区切られている</p>
<ol>
<li>環境準備</li>
<li>SDL</li>
<li>OpenGL</li>
<li>Dear ImGui</li>
<li>3D オブジェクト</li>
<li>テクスチャ</li>
</ol>
<p>ほとんど触れたことがないな、とりあえず上からやっていこう
ソースコード →<a href="https://github.com/toyamaguchi/start_opengl_in_rust" target="_blank" rel="nofollow noopener">toyamaguchi/start_opengl_in_rust</a></p>
<h2 id="環境">環境</h2>
<ul>
<li><a href="https://www.rust-lang.org/" target="_blank" rel="nofollow noopener">Rust Programming Language</a>に従って Rust をインストール
<ul>
<li>version は 1.39 だった</li>
<li>crate は<a href="https://crates.io/" target="_blank" rel="nofollow noopener">crates.io: Rust Package Registry</a>で検索できる</li>
<li>VSCode の rls、rustup のパスを通してやる必要があった。<code>&quot;rust-client.rustupPath&quot;: &quot;~/.cargo/bin/rustup&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="sdl">SDL</h2>
<p>SDL は、グラフィックやサウンドの機能を持ったマルチメディアライブラリ。
<a href="https://ja.wikipedia.org/wiki/SDL" target="_blank" rel="nofollow noopener">SDL - Wikipedia</a><br>
これだけでも十分な機能を持つゲームを作成可能らしい</p>
<p>Rust からの利用は<code>crate「sdl2」</code>を利用する。<a href="https://github.com/Rust-SDL2/rust-sdl2" target="_blank" rel="nofollow noopener">Rust-SDL2/rust-sdl2: SDL2 bindings for Rust</a><br>
<code>sd12</code>は C 言語で書かれたライブラリを間接的に利用するラッパーのため SDL のインストールも必要。</p>
<p>SDL を使ってソフトに必要な構造を作って OpenGL で描画をしていく。基本的な構造とは、ウィンドウやメインループ、イベント処理のような部分。</p>
<h3 id="準備">準備</h3>
<ul>
<li><a href="https://github.com/Rust-SDL2/rust-sdl2" target="_blank" rel="nofollow noopener">Rust-SDL2/rust-sdl2: SDL2 bindings for Rust</a> の手順通り SDL をインストール</li>
<li><code>cargo.toml</code>に<code>sd12</code>を追加</li>
</ul>
<h3 id="作成">作成</h3>
<p><code>sdl2</code>の crates.io ページを見る。</p>
<h2 id="opengl">OpenGL</h2>
<p>SDL のウィンドウに描画していく</p>
<h3 id="準備-1">準備</h3>
<p><code>cargo.toml</code>に<code>gl</code>(OpenGL の API を利用可能に),<code>cgmath</code>(CG 用の数学関連機能),<code>c_str_macro</code>(C 言語とコンパチビリティんのある文字列型を生成できる<code>c_str!</code>マクロが使えるようになる)を追加</p>
<h3 id="作成-1">作成</h3>
<p>HelloWorld は難しいらしいので三角形を描画する</p>
<p>シェーダーという言葉が出てきた</p>
<p>写経辛いのでコピペに切り替えていく</p>
<p>OpenGL3.1 を使う、このバージョンは丁度 API が一新されたバージョンで、<code>Core</code>(新しい API のみ)と<code>Compability</code>(古い API もサポート)パッケージがある。今回は<code>Core</code></p>
<p>描画はシェーダと呼ばれる描画プログラムを通してデータを送る<br>
シェーダなしのサンプルコードは古い可能性があるので注意<br>
呼び名は<br>
あり: Programmable Pipeline<br>
なし: Fixed Function Pipeline<br>
などというらしい</p>
<p>シェーダは実行時にソースコードをコンパイルして使えるプログラムなのでこういった名称になってる</p>
<p>今回具体的には Vertex シェーダと Fragment シェーダを使った</p>
<h4 id="vertex-シェーダ">Vertex シェーダ</h4>
<p>Vertex はそもそも頂点のこと、辺と辺を結ぶ点。3D 空間内の頂点座標を画面上の座標にするまでに必要な計算をこのシェーダでやってる</p>
<p>描画したい頂点が、3D 空間の中でどの位置にあるのかを表すモデル行列<br>
カメラの一を考慮したビュー行列<br>
カメラから見た 3D 空間をどのように画面に描画するかを表す射影行列<br>
3 つの行列をかけ合わせて最終的な画面上の座標になる</p>
<h4 id="fragment-シェーダ">Fragment シェーダ</h4>
<p>色を計算するシェーダ、Vertex シェーダから座標を得てテクスチャの中から適切な位置の色情報を計算して描画につかう</p>
<p>どちらも GLSL を使って実装する。<br>
GLSL(OpenGL Shading Language)はシェーダ専用の言語、GPU や前段のシェーダからの情報、扱える変数に独特のルールがある。<br>
GPU での動作なので並列計算できる、画面上に多くの 3D オブジェクトを描画したいならシェーダを使って効果的に描画する必要がある。</p>
<p>GLSL のバージョンは 3.3</p>
<p>VBO(Vertex Buffer Object)は CPU から GPU に情報を渡すための入れ物、頂点データだったり色情報だったり<br>
VAO(Vertex Array Object)は VBO をどのようなまとまりで使うのかを設定するもの</p>
<p>WebGL の話ものってそう</p>
<p>サンプルコードが動かない → 動いた、sample リポジトリの rsc フォルダを追加すればよかっただけだった。章の最後に書いてあった。</p>
<pre tabindex="0"><code class="language-log" data-lang="log">RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/rust-opengl`
OK: init OpenGL: version=3.1
thread 'main' panicked at 'failed to open file: rsc/shader/shader.vs', src/shader.rs:28:33
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /Users/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:76
   3: &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt
             at src/libstd/sys_common/backtrace.rs:60
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1030
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:64
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:49
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:196
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:473
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:380
  12: std::thread::local::fast::Key&lt;T&gt;::try_initialize
  13: rust_opengl::shader::Shader::new::{{closure}}
             at src/shader.rs:28
  14: core::result::Result&lt;T,E&gt;::unwrap_or_else
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/result.rs:818
  15: rust_opengl::shader::Shader::new
             at src/shader.rs:27
  16: rust_opengl::main
             at src/main.rs:52
  17: std::rt::lang_start::{{closure}}
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/rt.rs:64
  18: std::rt::lang_start_internal::{{closure}}
             at src/libstd/rt.rs:49
  19: std::panicking::try::do_call
             at src/libstd/panicking.rs:292
  20: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:80
  21: std::panicking::try
             at src/libstd/panicking.rs:271
  22: std::panic::catch_unwind
             at src/libstd/panic.rs:394
  23: std::rt::lang_start_internal
             at src/libstd/rt.rs:48
  24: std::rt::lang_start
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/rt.rs:64
  25: rust_opengl::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
</code></pre><p>できた。



<picture>
  <img src="/img/2019-11-12-18-08-05.png" alt="" decoding="async" loading="lazy">
</picture>
</p>
<p>頂点情報はこういう感じで書いていた</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="w">    </span><span class="c1">// set buffer
</span><span class="c1"></span><span class="w">    </span><span class="cp">#[rustfmt::skip]</span><span class="w">
</span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">buffer_array</span>: <span class="p">[</span><span class="kt">f32</span><span class="p">;</span><span class="w"> </span><span class="n">BUF_LEN</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">        </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="mf">0.0</span><span class="p">,</span><span class="w"> </span><span class="mf">1.0</span><span class="p">,</span><span class="w"> </span><span class="mf">0.0</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">];</span><span class="w">
</span></code></pre></div><h2 id="dear-imgui">Dear ImGui</h2>
<p><a href="https://github.com/ocornut/imgui" target="_blank" rel="nofollow noopener">ocornut/imgui</a></p>
<p>OpenGL に様々な GUI を追加できるライブラリ</p>
<p>これを使って SDL2 のウィンドウに新たにウィンドウを追加する。</p>
<p>出た</p>
<p>


<picture>
  <img src="/img/2019-12-17-15-49-08.png" alt="" decoding="async" loading="lazy">
</picture>
</p>
<p>


<picture>
  <img src="/img/2019-12-17-15-59-28.png" alt="" decoding="async" loading="lazy">
</picture>
</p>
<h3 id="効果的な使い方">効果的な使い方</h3>
<p>パラメータの微調節を行えるように、ここの値をスライダーで調節できるようにすると良いらしい
FPS を表示も</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Visualforceの基礎</title>
      <link>https://mcho.dev/notes/visualforce%E3%81%AE%E5%9F%BA%E7%A4%8E/</link>
      <pubDate>Mon, 11 Nov 2019 15:50:31 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/visualforce%E3%81%AE%E5%9F%BA%E7%A4%8E/</guid>
      <description><![CDATA[Visualforce とは Lightning Platform でホストできるモバイル及びデスクトップアプリケーション用の UI フレームワーク Salesforce の組み込み機能の拡張、新しいアプリケーションの作成ができる 標準または Apex でビジネスロジックを記述する。 使用できる場所]]></description>
      <content:encoded><![CDATA[<h2 id="visualforce-とは">Visualforce とは</h2>
<ul>
<li>Lightning Platform でホストできるモバイル及びデスクトップアプリケーション用の UI フレームワーク</li>
<li>Salesforce の組み込み機能の拡張、新しいアプリケーションの作成ができる</li>
<li>標準または Apex でビジネスロジックを記述する。</li>
</ul>
<h2 id="使用できる場所">使用できる場所</h2>
<ul>
<li>ナビゲーションバーに追加</li>
<li>標準ページレイアウト内に表示</li>
<li>Lightning アプリケーションビルダーでコンポーネントとして追加する
<ul>
<li>[Lightning Experience、Lightning コミュニティ、およびモバイルアプリケーションで利用可能] を有効にする必要がある。</li>
</ul>
</li>
<li>オブジェクトページの標準ボタンやリンクを上書きして表示する</li>
<li>オブジェクトページにカスタムボタンやリンクを配置して表示する</li>
</ul>
<h2 id="ページの作成">ページの作成</h2>
<ul>
<li>API を使用して作成変更できる</li>
<li>開発者コンソール
<ul>
<li>エディタがついてる。補完あり</li>
<li>LightningExperience のページから実行で LightningExperience でプレビュ $A.get(&ldquo;e.force:navigateToURL&rdquo;).setParams({&ldquo;url&rdquo;: &ldquo;/apex/pageName&rdquo;}).fire();</li>
</ul>
</li>
<li>xml ベース</li>
</ul>
<h2 id="単純な変数と数式の使用">単純な変数と数式の使用</h2>
<ul>
<li>グローバル変数 ex. <code>$User</code> <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_global.htm" target="_blank" rel="nofollow noopener">グローバル変数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
<li>構文 {! expression } を評価して出力してくれる
<ul>
<li>expression ないは大文字小文字区別なし</li>
<li>文字列連結は&amp;</li>
<li>メンバーアクセスは<code>.</code>(ドット)つなぎ</li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_operators.html" target="_blank" rel="nofollow noopener">式の演算子 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
</li>
<li>標準関数 ex. TODAY(), DAY()&hellip; <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_functions.htm" target="_blank" rel="nofollow noopener">関数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h2 id="標準コントローラの使用">標準コントローラの使用</h2>
<ul>
<li>MVC</li>
<li>標準なアクションとデータアクセスを処理できる</li>
<li><code>&lt;apex standardController=&quot;Account&quot;&gt;</code>で有効化</li>
<li>getQuery でコントローラにパラメータを渡せる。ex. <code>/apex/pageName?id={ObjectID}</code></li>
</ul>
<h2 id="レコード項目テーブルの表示">レコード、項目、テーブルの表示</h2>
<ul>
<li><code>&lt;apex:detail /&gt;</code>等の一括出力コンポーネントがある</li>
<li><code>&lt;apex:outputField value=&quot;{! Account.Name }&quot;/&gt;</code>のような UI コンポーネントもある</li>
<li><code>&lt;!--&gt;</code>はテーブル UI</li>
<li><code>&lt;apex:relatedList list=&quot;Contacts&quot;&gt;</code>はリスト</li>
</ul>
<h2 id="フォームを使用したデータの入力">フォームを使用したデータの入力</h2>
<ul>
<li><code>&lt;apex:form&gt;</code>のデータは<code>&lt;apex:page&gt;</code>で指定されたコントローラーを元にする</li>
<li>プラットフォームのスタイルを使用する要素としない要素がある
<ul>
<li>する
<ul>
<li><code>&lt;apex:form&gt;</code>を使用している場合</li>
<li><code>&lt;apex:pageBlock&gt;</code>及び<code>&lt;apex;pageBlockSection&gt;</code>内で入力要素を使用する場合</li>
</ul>
</li>
</ul>
</li>
<li><code>&lt;apex:commandButton /&gt;</code>でボタンが作成できる。要素を足すことで色々指定する。<code>action=&quot;{! save }&quot;</code>,<code>value=&quot;Save&quot;</code>等々</li>
</ul>
<h2 id="標準リストコントローラの使用">標準リストコントローラの使用</h2>
<ul>
<li>クエリ可能</li>
<li>コレクション変数でレコードの使用、絞り込み、ページネーションなども用意されている</li>
<li>一度に多数のレコードを操作することを目的としている</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- recordSetVarで作業するオブジェクトを設定 --&gt;</span>
<span class="nt">&lt;apex:page</span> <span class="na">standardController=</span><span class="s">&#34;Contact&#34;</span> <span class="na">recordSetVar=</span><span class="s">&#34;contacts&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;apex:pageBlock</span> <span class="na">title=</span><span class="s">&#34;Contacts List&#34;</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Contacts List --&gt;</span>
        <span class="c">&lt;!-- テーブルのvalueにrecordSetVarで設定されたオブジェクトを渡す --&gt;</span>
        <span class="nt">&lt;apex:pageBlockTable</span> <span class="na">value=</span><span class="s">&#34;{! contacts }&#34;</span> <span class="na">var=</span><span class="s">&#34;ct&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.FirstName }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.LastName }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.Email }&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;apex:column</span> <span class="na">value=</span><span class="s">&#34;{! ct.Account.Name }&#34;</span><span class="nt">/&gt;</span>
        <span class="err">&lt;</span>/!--&gt;
    <span class="nt">&lt;/apex:pageBlock&gt;</span>
<span class="nt">&lt;/apex:page&gt;</span>
</code></pre></div><ul>
<li><code>&lt;apex:datalist&gt;</code>, <code>&lt;apex:repeat&gt;</code>等でリストを作れる</li>
</ul>
<h2 id="リンク">リンク</h2>
<ul>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.pages.meta/pages/pages_compref.htm" target="_blank" rel="nofollow noopener">標準のコンポーネントの参照 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vueでモノレポがしたかった</title>
      <link>https://mcho.dev/notes/vue%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E3%81%8C%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F/</link>
      <pubDate>Tue, 05 Nov 2019 15:31:32 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/vue%E3%81%A7%E3%83%A2%E3%83%8E%E3%83%AC%E3%83%9D%E3%81%8C%E3%81%97%E3%81%9F%E3%81%8B%E3%81%A3%E3%81%9F/</guid>
      <description><![CDATA[これはなに Vue のプロジェクトに管理画面用アプリケーションを追加した際にやったことのメモ 事前知識 @vue/cli, @vue/cli-serviceについてあまり知らなかったので、今回よく使っていたコマンドをメモ vue-cli-service build - vue c]]></description>
      <content:encoded><![CDATA[<h2 id="これはなに">これはなに</h2>
<p>Vue のプロジェクトに管理画面用アプリケーションを追加した際にやったことのメモ</p>
<h2 id="事前知識">事前知識</h2>
<p><code>@vue/cli</code>, <code>@vue/cli-service</code>についてあまり知らなかったので、今回よく使っていたコマンドをメモ</p>
<ul>
<li><code>vue-cli-service build</code> - <code>vue create</code>で作成されたプロジェクトの npm scripts に<code>npm run build</code>として登録されていた。<code>vue.config.js</code>にビルド設定がある。</li>
<li><code>vue inspect</code> - <code>vue.config.js</code>を考慮した実際にビルドの際に使われる<code>webpack.config.js</code>を出力してくれる</li>
</ul>
<h2 id="始める前のプロジェクト構成等">始める前のプロジェクト構成等</h2>
<p><code>vue cli</code>で生成したままのプロジェクト構成でした。
必要そうなものを抜き出すとこんな感じ</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">├── public
├── src
├── tests
├── package.json
└── vue.config.js
</code></pre><p>ちなみにビルドは<code>vue-cli-service build</code>で行っていた。</p>
<h2 id="やりたいこと">やりたいこと</h2>
<ul>
<li>出力を dist/app, dist/admin のように複数ディレクトリに分ける。</li>
<li>ビルド、ビルド設定を分ける</li>
<li>lint 設定は共有する</li>
</ul>
<h2 id="変更後のディレクトリ構成とビルドコンフィグ">変更後のディレクトリ構成とビルドコンフィグ</h2>
<p>アプリと管理画面のソースを分けるために以下のようにディレクトリ構成を変更した。</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">.
├── projects
│    ├── admin
│    │   ├── public
│    │   ├── src
│    │   ├── package.json
│    │   └── vue.config.js
│    └── app
│        ├── public
│        ├── src
│        ├── package.json
│        └── vue.config.js
└── package.json
</code></pre><p><code>projects/app</code>には以前から存在していたアプリケーションのコードとそれら周辺のファイルを、<code>projects/admin</code>には<code>vue create admin</code>したものが入っている。<br>
上記には書いていないが<code>tsconfig.json</code>や<code>.eslintrc</code>はルートと各プロジェクトに配置してあり、ルートのものを各プロジェクトが extends している。<br>
あとは<code>vue.config.js</code>に<code>outputDir</code>を追加して、出力フォルダを揃えたくらいで、ほぼ初期設定。</p>
<h2 id="こうなった理由">こうなった理由</h2>
<p>やり始めた際は<code>vue.config.js</code>の<code>pages</code>でマルチエントリにして終わりと思っていたけど、そうは行かなかったのは以下。</p>
<ul>
<li>出力先が同ディレクトリ、プロジェクト毎に一つ深くしたかったが、<code>vue.config.js</code>から制御しきれなかった。</li>
<li>コンフィグ系が共有
<ul>
<li><code>tsconfig.json</code>、<code>vue.config.js</code>等々。必要のない設定を読み込むことが双方のプロジェクトに発生する。</li>
</ul>
</li>
<li>ビルドが同時のみ
<ul>
<li>現時点の<code>vue-cli-service(ver 3.12.1)</code>では<code>vue.config.js</code>の<code>pages</code>はエントリポイントを増やすことだけを行って、個別に<code>webpack.config.js</code>相当のものを作るわけじゃなかった。</li>
</ul>
</li>
</ul>
<p>ということで、<code>projects</code>ディレクトリを作ってそこで<code>vue create admin</code>を叩いた感じになった。</p>
<h2 id="この構成で思うこと">この構成で思うこと</h2>
<ul>
<li>package.json めっちゃある。</li>
<li>node_modules もめっちゃある、中身重複しまくりそう。</li>
<li>vue のモノレポ環境はまだ成長段階な感じがする。<code>VueLanguageServer</code>も複数プロジェクトには対応していなかった。</li>
</ul>
<h2 id="これからどうするか">これからどうするか</h2>
<ul>
<li>Webpack を学ぶ
<ul>
<li>強くなればもっとスリムにできそう</li>
<li>コントリビュートへも繋がりそう</li>
</ul>
</li>
<li>VSCode の拡張機能、エディタの技術を学ぶ
<ul>
<li>LanguageServer や Linter の最適化に苦労したので・・・</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>TRAILHEADに入門した</title>
      <link>https://mcho.dev/notes/trailhead%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%9F/</link>
      <pubDate>Thu, 31 Oct 2019 13:07:17 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/trailhead%E3%81%AB%E5%85%A5%E9%96%80%E3%81%97%E3%81%9F/</guid>
      <description><![CDATA[TRAILHEAD ってなに Trailhead | 楽しく学ぶ方法 Salesforce が運営している学習サイト、コンテンツは主に Salesforce 関連で、経営者、営業、開発向けが用意されている。 Salesforce 関連以外も Blockchain や、IOS アプリケーション開発のコンテンツもある。 やり始める前の]]></description>
      <content:encoded><![CDATA[<h2 id="trailhead-ってなに">TRAILHEAD ってなに</h2>
<p><a href="https://trailhead.salesforce.com/ja/home" target="_blank" rel="nofollow noopener"><em>Trailhead | 楽しく学ぶ方法</em></a></p>
<p>Salesforce が運営している学習サイト、コンテンツは主に Salesforce 関連で、経営者、営業、開発向けが用意されている。
Salesforce 関連以外も Blockchain や、IOS アプリケーション開発のコンテンツもある。</p>
<h2 id="やり始める前の認識">やり始める前の認識</h2>
<ul>
<li>無数にある PaaS の一つ
<ul>
<li>SaaS も提供してる</li>
</ul>
</li>
<li>セールス・顧客系に強い</li>
<li>アプリやコンポーネントをリリースできる</li>
</ul>
<p>以下、とりあえず<a href="https://trailhead.salesforce.com/ja/users/00550000007HqDdAAK/trailmixes/start-develop" target="_blank" rel="nofollow noopener">Trailmix by ルーキー会 Salesforce DeveloperGroup</a>を順にメモする</p>
<h2 id="salesforce-テクノロジモデル">Salesforce テクノロジモデル</h2>
<ul>
<li>信頼の基準、最も信頼されるために行ってきた投資
<ul>
<li><a href="https://trust.salesforce.com/ja/" target="_blank" rel="nofollow noopener">Salesforce Trust</a> でシステムの状況や、セキュリティ対策が見れる</li>
</ul>
</li>
<li>個別の企業以上のセキュリティを提供する方法
<ul>
<li>マルチテナンシー型で提供する
<ul>
<li>利益となるイノベーションに注力できる</li>
<li>高級マンションの建物を想像して
<ul>
<li>ドアマン、備え付き洗濯機&hellip;</li>
<li>自分専用のスペース</li>
<li>インフラ系は大家が管理</li>
</ul>
</li>
<li>Salesforce は大家の役割</li>
<li>小さい企業から大きい企業まで同じコードベースを利用することで利益を得ることができる</li>
</ul>
</li>
</ul>
</li>
<li>規則の厳しい業種が Salesforce に最も重要なデータを委ねる理由
<ul>
<li>上記の通り</li>
</ul>
</li>
<li>メタデータ
<ul>
<li>データのためのデータ？</li>
<li>カスタムタグ、カスタム項目、自動アラート、標準レポート、Chatte 等、全てがメタデータ</li>
<li>カスタム機能と標準機能のすべてを含む Salesforce インスタンスの構造</li>
<li>カスタマイズは特別なメタデータレイヤに分離している
<ul>
<li>バックグラウンドの更新やプラットフォームの更新・改善を行うことができる</li>
</ul>
</li>
</ul>
</li>
<li>アプリケーション開発
<ul>
<li>カスタマイズや変更が可能なインフラを提供することが使命</li>
<li>メタデータ駆動型で速度が出る
<ul>
<li>ケーキにクリームを塗るように</li>
</ul>
</li>
<li>ポイント&amp;クリックかカスタムコードで開発</li>
</ul>
</li>
</ul>
<h2 id="salesforce-platform-の使用開始">Salesforce Platform の使用開始</h2>
<ul>
<li>標準機能
<ul>
<li>リードと商談</li>
<li>顧客サポートのためのケースとコミュニティ</li>
<li>モバイルアプリ</li>
<li>会社とつながるための Chatter とコミュニティ</li>
<li>カスタマージャーニーを管理するための MarketingCloud</li>
<li>あまり良くわかってない</li>
</ul>
</li>
<li>用語
<ul>
<li>アプリケーション
<ul>
<li>ビジネスプロセスをサポートするオブジェクト、項目、その他の機能のセット</li>
</ul>
</li>
<li>オブジェクト
<ul>
<li>特定の種類の情報が保存される、DB のテーブル</li>
<li>標準とカスタムがある</li>
</ul>
</li>
<li>データベース
<ul>
<li>巨大なスプレッドシートを想像</li>
</ul>
</li>
<li>レコード
<ul>
<li>オブジェクトデータベーステーブルの行</li>
</ul>
</li>
<li>項目
<ul>
<li>オブジェクトデータベーステーブルの列</li>
</ul>
</li>
<li>組織
<ul>
<li>Salesforce の特定のインスタンス</li>
</ul>
</li>
</ul>
</li>
<li>実際にポイント&amp;クリックで作ってみた
<ul>
<li>データベースへカスタムフィールドを追加できた</li>
<li>データベーステーブルのレコード詳細画面で追加されたフィールドの入力欄が表示された</li>
</ul>
</li>
<li>Salesforce アーキテクチャ
<ul>
<li>何層にも重なってる</li>
<li>マルチテナンシー</li>
</ul>
</li>
<li>設定
<ul>
<li>上部ギアメニューから開く</li>
<li>組織情報、ユーザ、プロファイル、設定変更履歴の参照、ログイン履歴等見れる</li>
</ul>
</li>
<li>AppExchange の戦略と、アプリケーションのインストール
<ul>
<li>使用予定の部門を特定</li>
<li>要望を最大限に満たすものを調査
<ul>
<li>ビジネスの問題</li>
<li>最も苦労している点</li>
<li>何人のユーザが必要としているか</li>
<li>予算</li>
<li>期限</li>
</ul>
</li>
<li>そうすることで最適なアプリケーションを見つけやすくなる</li>
<li>テスト環境にダウンロード、インストールして、競合がないか確認する</li>
<li>候補が複数ある場合はテストした内容を、使用できない機能や不要な機能がないか検討。関係者にフィードバックを依頼</li>
<li>本番にインストール、トレーニング、ドキュメントの提供</li>
</ul>
</li>
</ul>
<h2 id="データモデリング">データモデリング</h2>
<ul>
<li>Sales プラットフォームでオブジェクトを使用するメリット
<ul>
<li>オブジェクトはデータベーステーブルのこと、テーブルの列が項目、行がレコードとみなされる</li>
<li>データモデルはオブジェクトと項目のコレクション</li>
<li>標準オブジェクト
<ul>
<li>Salesforce に含まれるオブジェクト</li>
<li>取引先、取引先責任者、リード、商談などの一般的なビジネスオブジェクト</li>
</ul>
</li>
<li>カスタムオブジェクト
<ul>
<li>会社や業種に固有の情報を保存するために作成するオブジェクト</li>
<li>プラットフォームによっては作成にフックして、UI のページレイアウトが作成される</li>
</ul>
</li>
<li>設定の新規からオブジェクト作成と、オブジェクトの項目とリレーションの新規ボタンからフィールド追加を行った</li>
<li>スキーマビルダーという MySQL で言う ER 図のようなツールもある</li>
</ul>
</li>
</ul>
<h2 id="プラットフォーム開発の基礎">プラットフォーム開発の基礎</h2>
<ul>
<li>Dream House Realty っていうアプリを作っていってみる</li>
<li>Apex</li>
<li>SOQL Salesforce Object Query Language</li>
<li>Apex 上の SOQL は実行されてレコードに変換される</li>
<li>Apex で書いた Controller を Visualforce ページから利用できる</li>
<li>Heroku がでてきた</li>
<li>REST や SOAP API も使える</li>
<li>Heroku Connect で Salesforce のオブジェクトを Heroku Postgre に変換できる</li>
</ul>
<h2 id="apex-の基礎とデータベース">Apex の基礎とデータベース</h2>
<ul>
<li>小文字と大文字が区別されない</li>
<li>開発者コンソールの Debug &gt; 匿名実行みたいなやつが便利</li>
<li>sObject は汎用 Type、標準オブジェクト、カスタムオブジェクトのレコードに使用できる</li>
<li>insert, upsert, merge といった便利なデータ更新用 DML ステートメントがある</li>
<li>Database 配下に DML ステートメントと同じ物があって、それの第二引数に false を渡すと例外の代わりに Result オブジェクトを返すことができる</li>
<li>SOSL 組織全体のレコードから特定の情報を検索、部分一致検索、どのオブジェクトのフィールドを対象とするか選べる</li>
</ul>
<h2 id="apex-トリガ">Apex トリガ</h2>
<ul>
<li>データベースの beforeSave とかのこと</li>
<li><code>trigger SoqlTriggerBulk on Account(after update) {</code> で定義する。このトリガ内で<code>Trigger</code>を呼び出せて、そこに色々情報が詰まってる</li>
<li>レコードごとに処理すると思いし、制限に引っかかるから SOQL とか DML とか駆使してやろうね</li>
</ul>
<h2 id="apex-テスト">Apex テスト</h2>
<ul>
<li><code>@isTest</code>を使うとパラメータを指定できる。知らなかった。</li>
<li><code>Test &gt; RunAll</code>でやるとコードカバレッジが出せる</li>
<li><a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.apexcode.meta/apexcode/apex_testing_tools_start_stop_test.htm" target="_blank" rel="nofollow noopener">Limits、startTest、および stopTest の使用 | Apex 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h2 id="visualforce-の基礎">Visualforce の基礎</h2>
<ul>
<li>Lightning Platform でホストできるモバイル及びデスクトップアプリケーション用の UI フレームワーク</li>
<li>Salesforce の組み込み機能の拡張、新しいアプリケーションの作成ができる</li>
<li>標準または Apex でビジネスロジックを記述する。</li>
</ul>
<h3 id="使用できる場所">使用できる場所</h3>
<ul>
<li>ナビゲーションバーに追加</li>
<li>標準ページレイアウト内に表示</li>
<li>Lightning アプリケーションビルダーでコンポーネントとして追加する
<ul>
<li>[Lightning Experience、Lightning コミュニティ、およびモバイルアプリケーションで利用可能] を有効にする必要がある。</li>
</ul>
</li>
<li>オブジェクトページの標準ボタンやリンクを上書きして表示する</li>
<li>オブジェクトページにカスタムボタンやリンクを配置して表示する</li>
</ul>
<h3 id="ページの作成">ページの作成</h3>
<ul>
<li>API を使用して作成変更できる</li>
<li>開発者コンソール
<ul>
<li>エディタがついてる。補完あり</li>
<li>LightningExperiense のページから実行で LightningExperiense でプレビュ $A.get(&ldquo;e.force:navigateToURL&rdquo;).setParams({&ldquo;url&rdquo;: &ldquo;/apex/pageName&rdquo;}).fire();</li>
</ul>
</li>
<li>xml ベース</li>
</ul>
<h3 id="単純な変数と数式の使用">単純な変数と数式の使用</h3>
<ul>
<li>グローバル変数 ex. $<a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_global.htm" target="_blank" rel="nofollow noopener">User グローバル変数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
<li>構文 {! expression } を評価して出力してくれる
<ul>
<li>expression ないは大文字小文字区別なし</li>
<li>文字列連結は&amp;</li>
<li>式の演算子 | <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_operators.htm" target="_blank" rel="nofollow noopener">Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
</li>
<li>標準関数 ex. TODAY(), DAY()&hellip; <a href="https://developer.salesforce.com/docs/atlas.ja-jp.222.0.pages.meta/pages/pages_variables_functions.htm" target="_blank" rel="nofollow noopener">関数 | Visualforce 開発者ガイド | Salesforce Developers</a></li>
</ul>
<h3 id="標準コントローラの使用">標準コントローラの使用</h3>
<ul>
<li>MVC</li>
<li>標準なアクションとデータアクセスを処理できる</li>
<li><code>&lt;apex standardController=&quot;Account&quot;&gt;</code>で有効化</li>
<li>getQuery でコントローラにパラメータを渡せる。ex. /apex/pageName?id={ObjectID}</li>
</ul>
<h3 id="レコード項目テーブルの表示">レコード、項目、テーブルの表示</h3>
<ul>
<li>&lt;apex:detail /&gt;等の一括出力コンポーネントがある</li>
<li>&lt;apex:outputField value=&quot;{! Account.Name }&quot;/&gt;のような UI コンポーネントもある</li>
<li><a href="apex:pageBlockTable">apex:pageBlockTable</a>はテーブル UI</li>
<li>&lt;apex:relatedList list=&ldquo;Contacts&rdquo;&gt;はリスト</li>
</ul>
<h3 id="フォームを使用したデータの入力">フォームを使用したデータの入力</h3>
<ul>
<li><a href="apex:form">apex:form</a>のデータは<a href="apex:page">apex:page</a>で指定されたコントローラーを元にする</li>
<li>プラットフォームのスタイルを使用する要素としない要素がある
<ul>
<li>する
<ul>
<li><a href="apex:form">apex:form</a>を使用している場合</li>
<li><a href="apex:pageBlock">apex:pageBlock</a>及び&lt;apex;pageBlockSection&gt;内で入力要素を使用する場合</li>
</ul>
</li>
</ul>
</li>
<li>&lt;apex:commandButton /&gt;でボタンが作成できる。要素を足すことで色々指定する。action=&quot;{! save }&quot;,value=&ldquo;Save&quot;等々</li>
</ul>
<h3 id="レコードのリスト">レコードのリスト</h3>
<ul>
<li>
<p>html の要素もそのまま書ける</p>
</li>
<li>
<p><code>&lt;apex: repeat value=&quot;{! accounts }&quot; var=&quot;a&quot;&gt;</code>とするとなかで<code>{!a.id}</code>とかできる。</p>
</li>
<li>
<p><code>{! URLFOR($Resource.vfimagetest, 'cats/kitten1.jpg') }</code>とかの URLresolve 便利系がある</p>
</li>
<li>
<p>静的リソースは設定の静的リソースから追加できる</p>
</li>
</ul>
<h2 id="開発者コンソールの基礎">開発者コンソールの基礎</h2>
<ul>
<li>ワークスペース分けできるらしい</li>
<li>Log パネル、Save Perspective で配置を保存できる</li>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
