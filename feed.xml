<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>
    Mcho
    </title>
    <link>https://mcho.dev/</link>
    <description>Recent content in このサイトについて
    on Mcho</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    
    
    <copyright>&amp;copy; mcho 2019</copyright>
    <lastBuildDate>Fri, 01 Feb 2019 10:02:31 +0900</lastBuildDate>
    
    
        <atom:link href="https://mcho.dev/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenAIの強化学習シミュレータGymを触ってみる</title>
      <link>https://mcho.dev/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/</link>
      <pubDate>Fri, 19 Feb 2021 10:47:40 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/</guid>
      <description><![CDATA[強化学習のシミュレーターを作ってみたいなということで、強化学習のフレームワークである Gym を動かしてみようと思いました。 なにはともあれ Python の環境を用意する Python 自体普段は触っていないので手探りでした。結局はpy]]></description>
      <content:encoded><![CDATA[<p>強化学習のシミュレーターを作ってみたいなということで、強化学習のフレームワークである Gym を動かしてみようと思いました。</p>
<h2 id="なにはともあれ-python-の環境を用意する">なにはともあれ Python の環境を用意する</h2>
<p>Python 自体普段は触っていないので手探りでした。結局は<code>pyenv</code>+<code>venv</code>で落ち着いています。</p>
<p>手元環境は</p>
<ul>
<li>MacOS Monterey 12.3.1</li>
<li>Homebrew</li>
</ul>
<p>です。</p>
<p>Python 本体、複数バージョンを管理するための候補は</p>
<ul>
<li>brew</li>
<li>pyenv</li>
<li>miniconda</li>
<li>anaconda</li>
</ul>
<p>でした。</p>
<p>仮想環境の候補としては</p>
<ul>
<li>venv</li>
<li>pyenv-virtualenv</li>
<li>pipenv</li>
<li>miniconda</li>
<li>anaconda</li>
</ul>
<p>がありました。</p>
<p>Python 本体、複数バージョンの管理は、他の言語でも使い慣れている<code>pyenv</code>を選びました。</p>
<p>仮想環境は、<code>venv</code>を使うことにしたのは、公式の<a href="https://docs.python.org/ja/3/library/venv.html?highlight=env#an-example-of-extending-envbuilder" target="_blank" rel="nofollow noopener">venv &mdash; 仮想環境の作成 — Python 3.10.4 ドキュメント</a>で紹介されていたことが決め手でした。
以前 Python を触っていたときに使っていた<code>pipenv</code>は開発が止まっていたこと、<code>conda</code>系は動かすだけだとコマンド追加などで過剰に感じたことも、後押ししました。
<code>pyenv-virutualenv</code>は<code>venv</code>と同じ動作で使えますが、標準ライブラリとして取り込まれている<code>venv</code>の方がなんとなく軽くてエラーが発生しないかなと思ってます。
<code>venv</code>と<code>virtualenv</code>の違いは、<a href="https://virtualenv.pypa.io/en/latest/" target="_blank" rel="nofollow noopener">Virtualenv — virtualenv 20.14.2.dev2+g8d78ee0 documentation</a>より、機能の多さ、動作の軽さのようです。</p>
<p>以下開発環境構築時のコマンドラインです。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">brew install pyenv pyenv-virtualenv
<span class="c1"># 以下二行を.bash_profile等に書き込む</span>
<span class="c1"># eval &#34;$(pyenv init -)&#34;</span>
<span class="c1"># eval &#34;$(pyenv virtualenv-init -)&#34;</span>

pyenv install 3.8.8

<span class="nb">cd</span> path/to/project

pyenv <span class="nb">local</span> 3.8.8
python -m venv &lt;venvname&gt;
<span class="nb">source</span> &lt;venvname&gt;/bin/activate
pip install --upgrade pip
</code></pre></div><h2 id="gym-を動かす">Gym を動かす</h2>
<p>以下リンクを参考に、Gym を動かします。</p>
<ul>
<li><a href="https://gym.openai.com/" target="_blank" rel="nofollow noopener">Gym</a></li>
<li><a href="http://gym.openai.com/docs/" target="_blank" rel="nofollow noopener">Gym Docs</a></li>
<li><a href="https://github.com/openai/retro" target="_blank" rel="nofollow noopener">openai/retro: Retro Games in Gym</a></li>
</ul>
<h2 id="readme-に沿って動かしてみる">README に沿って動かしてみる</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">git clone https://github.com/openai/gym
pip install -e gym
// examples/agentsにあるプログラムを実行してみる
python examples/agents/cem.py
</code></pre></div><p>実行されると棒が倒れないように台座を動かしている。






<picture>
  <source media="(max-width: 480px)" srcset="/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/image/2021-02-19-11-25-21_hubedf350c6a7c5566baacd6e43c6e5b00_57229_480x0_resize_q75_bgffffff_box_3.jpg 480w">
  <source media="(max-width: 768px)" srcset="/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/image/2021-02-19-11-25-21_hubedf350c6a7c5566baacd6e43c6e5b00_57229_768x0_resize_q75_bgffffff_box_3.jpg 768w">
  <source media="(max-width: 1024px)" srcset="/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/image/2021-02-19-11-25-21_hubedf350c6a7c5566baacd6e43c6e5b00_57229_1024x0_resize_q75_bgffffff_box_3.jpg 1024w">
  <img src="/notes/openai%E3%81%AE%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFgym%E3%82%92%E8%A7%A6%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B/image/2021-02-19-11-25-21.png" alt="cem.py" decoding="async" loading="lazy">
</picture>
</p>
<p><code>examples/agents</code>配下は以下の通り。<code>cem.py</code>のみ学習アルゴリズムが実行されている</p>
<h3 id="random_agentpy"><code>random_agent.py</code></h3>
<p>毎回リセットして、RandomAgent.act を実行。</p>
<p><a href="https://github.com/openai/gym/blob/4c460ba6c8959dd8e0a03b13a1ca817da6d4074f/examples/agents/random_agent.py#L39-L45" target="_blank" rel="nofollow noopener">https://github.com/openai/gym/blob/4c460ba6c8959dd8e0a03b13a1ca817da6d4074f/examples/agents/random_agent.py#L39-L45</a>
<a href="https://github.com/openai/gym/blob/4c460ba6c8959dd8e0a03b13a1ca817da6d4074f/examples/agents/random_agent.py#L6-L13" target="_blank" rel="nofollow noopener">https://github.com/openai/gym/blob/4c460ba6c8959dd8e0a03b13a1ca817da6d4074f/examples/agents/random_agent.py#L6-L13</a></p>
<h3 id="cempy"><code>cem.py</code></h3>
<p>交差エントロピー<a href="https://mathwords.net/kousaentropy#:~:text=%E4%BA%A4%E5%B7%AE%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AD%E3%83%94%E3%83%BC%E3%81%AF%E3%80%81%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92,%E8%80%83%E3%81%88%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82" target="_blank" rel="nofollow noopener">交差エントロピーの例と微分の計算 - 具体例で学ぶ数学</a>を学習アルゴリズムとして使っています。</p>
<p>ここでモデルのトレーニングをしていて、cem メソッドが交差エントロピーの計算処理本体となってます。
<a href="https://github.com/openai/gym/blob/3bd5ef71c2ca3766a26c3dacf87a33a9390ce1e6/examples/agents/cem.py#L87-L93" target="_blank" rel="nofollow noopener">https://github.com/openai/gym/blob/3bd5ef71c2ca3766a26c3dacf87a33a9390ce1e6/examples/agents/cem.py#L87-L93</a></p>
<h3 id="keyboard_agentpy"><code>keyboard_agent.py</code></h3>
<p>キーボード入力を受付けているようですが、依存パッケージ足らなくて動きませんでした。</p>
<h2 id="openairetro-retro-games-in-gymhttpsgithubcomopenairetroを動かしてみる"><a href="https://github.com/openai/retro" target="_blank" rel="nofollow noopener">openai/retro: Retro Games in Gym</a>を動かしてみる</h2>
<p><a href="https://retro.readthedocs.io/en/latest/getting_started.html" target="_blank" rel="nofollow noopener">Getting Started — Gym Retro documentation</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">pip install gym-retro

python -m retro.examples.brute --game Airstriker-Genesis
</code></pre></div><p><a href="https://github.com/openai/retro/tree/master/retro/examples" target="_blank" rel="nofollow noopener">retro/retro/examples at master · openai/retro</a>
に評価アルゴリズムの例があります。評価アルゴリズムはライブラリとして呼び出しを行います。<code>python -m retro.examples.brute --game Airstriker-Genesis</code>では<code>retro.example.brute</code>が指定されています。</p>
<p>以下のコードで使えるゲーム一覧を表示できます。ROM が同梱されているわけではなく、別個用意する必要があるようです。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">retro</span>
<span class="nb">print</span><span class="p">(</span><span class="n">retro</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">list_games</span><span class="p">()))</span>
</code></pre></div><h2 id="終わりに">終わりに</h2>
<p>Python の環境構築から実際に動かすまでやってみました。Python の実行環境を用意するのは毎回少し調べたり、手間がかかっていましたが、今回は公式のドキュメントに<code>venv</code>があったのですんなり行きました。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PrettierでSalesforceのApexファイルをフォーマット、VSCode連携も</title>
      <link>https://mcho.dev/notes/prettier%E3%81%A7salesforce%E3%81%AEapex%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88vscode%E9%80%A3%E6%90%BA%E3%82%82/</link>
      <pubDate>Tue, 02 Feb 2021 13:39:03 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/prettier%E3%81%A7salesforce%E3%81%AEapex%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88vscode%E9%80%A3%E6%90%BA%E3%82%82/</guid>
      <description><![CDATA[必要なライブラリインストールする。 Prettier · Opinionated Code Formatter dangmai/prettier-plugin-apex: Code formatter for the Apex Programming Language npm i -D prettier prettier-plugin-apex apex 向け prettier 設定を.prettierrcなどとしてプロジェクトに追加する // .prettierrc { &amp;#34;overrides&amp;#34;: [ { &amp;#34;files&amp;#34;: [&amp;#34;*.cls&amp;#34;, &amp;#34;*.trigger&amp;#34;], &amp;#34;options&amp;#34;: { &amp;#34;useTabs&amp;#34;: true } } ] } prettier のフォーマットコマンドをテ]]></description>
      <content:encoded><![CDATA[<p>必要なライブラリインストールする。</p>
<p><a href="https://prettier.io/" target="_blank" rel="nofollow noopener">Prettier · Opinionated Code Formatter</a></p>
<p><a href="https://github.com/dangmai/prettier-plugin-apex" target="_blank" rel="nofollow noopener">dangmai/prettier-plugin-apex: Code formatter for the Apex Programming Language</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D prettier prettier-plugin-apex
</code></pre></div><p>apex 向け prettier 設定を<code>.prettierrc</code>などとしてプロジェクトに追加する</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">//</span> <span class="err">.prettierrc</span>
<span class="p">{</span>
  <span class="nt">&#34;overrides&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;files&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;*.cls&#34;</span><span class="p">,</span> <span class="s2">&#34;*.trigger&#34;</span><span class="p">],</span>
      <span class="nt">&#34;options&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;useTabs&#34;</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>prettier のフォーマットコマンドをテストする。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npx prettier -c path/to/apex.cls
</code></pre></div><p>以下のメッセージが出ていれば OK</p>
<p>style 違反があるとき</p>
<pre tabindex="0"><code class="language-log" data-lang="log">Checking formatting...
[warn] path/to/apex.cls
[warn] Code style issues found in the above file(s). Forgot to run Prettier?
</code></pre><p>style 違反がないとき</p>
<pre tabindex="0"><code class="language-log" data-lang="log">Checking formatting...
All matched files use Prettier code style!
</code></pre><p>ここまででプロジェクトの Apex ファイルが prettier でフォーマットできるようになりました。</p>
<h4 id="vscode-でフォーマットする">VSCode でフォーマットする。</h4>
<p>以下の拡張機能をインストール
<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="nofollow noopener">Prettier - Code formatter - Visual Studio Marketplace</a></p>
<p><code>.vscode/settings.json</code>をに以下を追記</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;[apex]&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;editor.defaultFormatter&#34;</span><span class="p">:</span> <span class="s2">&#34;esbenp.prettier-vscode&#34;</span><span class="p">,</span>
    <span class="err">//</span> <span class="err">保存時にフォーマットする設定です。お好みにあわせて変更してください。</span>
    <span class="nt">&#34;editor.formatOnSave&#34;</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>以上です。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>DeepRacer的なものを作りたい</title>
      <link>https://mcho.dev/notes/deepracer%E7%9A%84%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84/</link>
      <pubDate>Fri, 29 Jan 2021 16:38:09 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/deepracer%E7%9A%84%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84/</guid>
      <description><![CDATA[この記事の続き 大体の流れは レースゲームを作る。 各パラメータ、関数の調整。 強化学習モデルにゲームを遊ばせる。 クリア。できなければ 2 に戻る となりそう。 見ていて気になった、参考になりそうなもの Gym OpenAI が出してい]]></description>
      <content:encoded><![CDATA[<p><a href="https://mcho.dev/notes/aws-deepracer-driven-by-reinforcement-learning%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">この記事</a>の続き</p>
<p>大体の流れは</p>
<ol>
<li>レースゲームを作る。</li>
<li>各パラメータ、関数の調整。</li>
<li>強化学習モデルにゲームを遊ばせる。</li>
<li>クリア。できなければ 2 に戻る</li>
</ol>
<p>となりそう。</p>
<p>見ていて気になった、参考になりそうなもの</p>
<ul>
<li><a href="https://gym.openai.com/" target="_blank" rel="nofollow noopener">Gym</a> OpenAI が出している強化学習を試すためのツールキット
<ul>
<li><a href="https://github.com/openai/retro" target="_blank" rel="nofollow noopener">openai/retro: Retro Games in Gym</a> これだと、題材がレトロゲームになってたりしておもしろい</li>
</ul>
</li>
<li><a href="https://blog.brainpad.co.jp/entry/2017/02/24/121500" target="_blank" rel="nofollow noopener">強化学習入門 ～これから強化学習を学びたい人のための基礎知識～ - Platinum Data Blog by BrainPad</a> OpenAI Gym で Q 学習という単語が出てきてよくわからなかったので調べたら出てきた。Q 値は、状態価値の事で、Q 学習は<strong>Q 値を学習するためのアルゴリズムの一つ</strong>であるらしい。Q 値を学習するためのアルゴリズムは、他に Sarsa、モンテカルロ法、deep Q-network（DQN）等がある。
<ul>
<li>DQN の開発元は DeepMind 社らしい。ただ DeepMind 社が開発した AlphaGo とかは使っていない。<a href="http://7rpn.hatenablog.com/entry/2016/06/10/192357" target="_blank" rel="nofollow noopener">Google が出した囲碁ソフト「AlphaGo」の論文を翻訳して解説してみる。 - 7rpn’s blog: うわああああな日常</a></li>
</ul>
</li>
</ul>
<h3 id="ここまできて">ここまできて</h3>
<p>Web で動く事を目標にしてたけど、道が長いのでとりあえず OpenAIGym で強化学習を学ぶことに方針転換する。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>AWS DeepRacer: Driven by Reinforcement Learningをやってみた</title>
      <link>https://mcho.dev/notes/aws-deepracer-driven-by-reinforcement-learning%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Fri, 29 Jan 2021 10:32:42 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/aws-deepracer-driven-by-reinforcement-learning%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description><![CDATA[きっかけは、この動画を見て興味を持ったこと。 まずはチュートリアルコンテンツを探してみようと思い、リーグ - AWS DeepRacer | AWSから、タイトルのAWS DeepRacer: Driven by Reinforcement Learning | AWS トレーニングと認定を見つけた。 日本語版もある。 DeepRacer]]></description>
      <content:encoded><![CDATA[<p>きっかけは、この動画を見て興味を持ったこと。</p>
<p>
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Aut32pR5PQA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
<br>
まずはチュートリアルコンテンツを探してみようと思い、<a href="https://aws.amazon.com/jp/deepracer/league/" target="_blank" rel="nofollow noopener">リーグ - AWS DeepRacer | AWS</a>から、タイトルの<a href="https://www.aws.training/Details/eLearning?id=32143" target="_blank" rel="nofollow noopener">AWS DeepRacer: Driven by Reinforcement Learning | AWS トレーニングと認定</a>を見つけた。</p>
<p>日本語版もある。</p>
<p>DeepRacer 実機は、米 Amazon からの購入になる。
<a href="https://www.amazon.com/AWS-DeepRacer-Evo-Car-Sensor/dp/B081GZSJVL/ref=sr_1_1?dchild=1&amp;keywords=deepracer&#43;evo&amp;qid=1606341498&amp;sr=8-1" target="_blank" rel="nofollow noopener">Amazon.com: AWS DeepRacer Evo - Fully Autonomous 1/18th Scale Race Car for Developers: Amazon Devices</a></p>
<p>AWS DeepRacer でモデルのトレーニングをすると 1 回、$7 はかかる。
<a href="https://aws.amazon.com/jp/deepracer/pricing/?p=drl&amp;exp=hl" target="_blank" rel="nofollow noopener">料金 - AWS DeepRacer | AWS</a></p>
<h3 id="それでは始めようと思う">それでは始めようと思う</h3>
<p>強化学習が使われる。試行、評価、学習の繰り返し。コースを学習して周回できる事、その速さを競う事が DeepRacer の主目的。</p>
<h4 id="deepracer-で使われる用語">DeepRacer で使われる用語</h4>
<ul>
<li>Agent: Car 本体のこと</li>
<li>Environment: 環境、Agent と Action、学習ループごとに新しく定義し直される</li>
<li>Action : 進む方向やスピード
<ul>
<li>DescreteContinuous : 離散連続</li>
</ul>
</li>
<li>Reward: 報酬
<ul>
<li>Reward Function</li>
</ul>
</li>
<li>State: Car の状態
<ul>
<li>Partial State</li>
<li>Absolute State
<ul>
<li>Scalar</li>
</ul>
</li>
</ul>
</li>
<li>Task</li>
<li>Episode:　コースから外れてやり直しを行うと次のエピソードとして外れた場所からスタート</li>
<li>Policy: 状態によってどのアクションを取るか決める。今回は NN,CNN である
<ul>
<li>Stochastically: 確率的</li>
<li>deterministically: 確定的、State と Action の関係をより直接的に決められる</li>
<li>価値関数 V: 使うのは PRO アルゴリズム、近接ポリシー最適化アルゴリズム
<ul>
<li>StateAction</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>DeepRacer の裏では、Amazon SageMaker モデルの強化学習 と AWS RoboMaker 仮想空間と仮想環境を作成 が動いている。
SageMaker -&gt; S3 -&gt; RoboMaker -&gt; Redis -&gt; SageMarker</p>
<p>強化学習アルゴリズムを最適化するためのパラメータを指定していく</p>
<p>報酬関数は具体的に自分で書く、Basic/Advanced 選択できる。
報酬関数の評価</p>
<p>ハイパーパラメータ</p>
<ul>
<li>バッチサイズ　トレーニングデータの量</li>
<li>エポック　バッチトレーニングセットを通る回数</li>
<li>レート　最適探す時の細かさ</li>
<li>Exploration 　探索と適用　ローカル最大に閉じ込められるのを防ぐ</li>
<li>エントロピー　新しいアクションのランダム性が比例</li>
<li>Discount Factor 　即時報酬を求めるか</li>
<li>Loss Type
<ul>
<li>Huber Loss</li>
<li>平均二乗誤差</li>
</ul>
</li>
<li>Number Of Episode 　エピソードの数</li>
</ul>
<p>あとは AWS コンソールから DeepRacer を使って色々やるようだ</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>背面に隠れた要素をクリックできるようにするCSS</title>
      <link>https://mcho.dev/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/</link>
      <pubDate>Wed, 17 Jun 2020 17:48:15 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/</guid>
      <description><![CDATA[てっきりz-indexでできると思っていたけど、できなかったのでメモ pointer-events - CSS: カスケーディングスタイルシート | MDN を使う。 以下の画像のようなときに、透明なコンテナが横幅いっぱいに広がって下のボタンが押せなく]]></description>
      <content:encoded><![CDATA[<p>てっきり<code>z-index</code>でできると思っていたけど、できなかったのでメモ</p>
<p><a href="https://developer.mozilla.org/ja/docs/Web/CSS/pointer-events" target="_blank" rel="nofollow noopener">pointer-events - CSS: カスケーディングスタイルシート | MDN</a></p>
<p>を使う。<br>
以下の画像のようなときに、透明なコンテナが横幅いっぱいに広がって下のボタンが押せなくなるのを防ぎたかった。</p>
<p>





<picture>
  <source media="(max-width: 480px)" srcset="/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/image/2020-06-17-17-52-43_hu5bea7808337020c1f0a5703aa812dadf_11883_480x0_resize_q75_bgffffff_box_3.jpg 480w">
  <source media="(max-width: 768px)" srcset="/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/image/2020-06-17-17-52-43_hu5bea7808337020c1f0a5703aa812dadf_11883_768x0_resize_q75_bgffffff_box_3.jpg 768w">
  <source media="(max-width: 1024px)" srcset="/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/image/2020-06-17-17-52-43_hu5bea7808337020c1f0a5703aa812dadf_11883_1024x0_resize_q75_bgffffff_box_3.jpg 1024w">
  <img src="/notes/%E8%83%8C%E9%9D%A2%E3%81%AB%E9%9A%A0%E3%82%8C%E3%81%9F%E8%A6%81%E7%B4%A0%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8Bcss/image/2020-06-17-17-52-43.png" alt="需要ある時の例" decoding="async" loading="lazy">
</picture>
</p>
<p>こんな感じにすると透明なコンテナの下にある要素をクリックできる。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fixed-container&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;toast&#34;</span> <span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;toast&#34;</span> <span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;toast&#34;</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
  <span class="p">.</span><span class="nc">fixed-container</span> <span class="p">{</span>
    <span class="n">pointer-events</span><span class="p">:</span> <span class="kc">none</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="p">.</span><span class="nc">fixed-container</span> <span class="o">&gt;</span> <span class="p">.</span><span class="nc">toast</span> <span class="p">{</span>
    <span class="n">pointer-events</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>VSCode拡張のGitHub Issue(beta)</title>
      <link>https://mcho.dev/notes/vscode%E6%8B%A1%E5%BC%B5%E3%81%AEgithub-issuebeta/</link>
      <pubDate>Wed, 17 Jun 2020 17:33:52 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/vscode%E6%8B%A1%E5%BC%B5%E3%81%AEgithub-issuebeta/</guid>
      <description><![CDATA[GitHub Issues - Visual Studio Marketplace VSCode 上から手軽に Issue を確認できる拡張。 パネルの Issue からページに飛べたり、ブランチを切り替えたりできる。 Issue と Branch は 1 対 1 で管理されて、紐づくブランチはここのパネルから作成されたブランチになってた。 カ]]></description>
      <content:encoded><![CDATA[<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.github-issues-prs" target="_blank" rel="nofollow noopener">GitHub Issues - Visual Studio Marketplace</a></p>
<p>VSCode 上から手軽に Issue を確認できる拡張。<br>
パネルの Issue からページに飛べたり、ブランチを切り替えたりできる。<br>
Issue と Branch は 1 対 1 で管理されて、紐づくブランチはここのパネルから作成されたブランチになってた。<br>
カーソルを重ねると Issue 内容が title 属性で出てくるのでページに飛ばずに確認できる。<br>
ブランチ名などの Template も設定できるのでプロジェクトごとのブランチ作成ルールとかもここで管理できるっちゃできる。<br>
紐付いた Branch を手動で変更できない。</p>
<p>こんな感じのパネルが追加される。<br>



<picture>
  <img src="image/2020-06-17-17-35-20.png?width=200px" alt="GitHub Issue のパネル" decoding="async" loading="lazy">
</picture>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ソシオメディアのヒューマンインターフェース ガイドラインと色々な企業のデザインガイドライン</title>
      <link>https://mcho.dev/notes/%E3%82%BD%E3%82%B7%E3%82%AA%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%AE%E3%83%92%E3%83%A5%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9-%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A8%E8%89%B2%E3%80%85%E3%81%AA%E4%BC%81%E6%A5%AD%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3/</link>
      <pubDate>Wed, 10 Jun 2020 23:05:06 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/%E3%82%BD%E3%82%B7%E3%82%AA%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%AE%E3%83%92%E3%83%A5%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9-%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A8%E8%89%B2%E3%80%85%E3%81%AA%E4%BC%81%E6%A5%AD%E3%81%AE%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%AC%E3%82%A4%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3/</guid>
      <description><![CDATA[見やすい、UI を作るときの参考に ソシオメディア | ヒューマンインターフェース ガイドライン (1/5) ヒューマンインターフェース ガイドラインという言葉は Apple も使ってる Human Interface Guidelines - Design - Apple Developer Canva が色々な企業のガイドラインをまと]]></description>
      <content:encoded><![CDATA[<p>見やすい、UI を作るときの参考に
<a href="https://www.sociomedia.co.jp/category/shig" target="_blank" rel="nofollow noopener">ソシオメディア | ヒューマンインターフェース ガイドライン (1/5)</a></p>
<p>ヒューマンインターフェース ガイドラインという言葉は Apple も使ってる
<a href="https://developer.apple.com/design/human-interface-guidelines/" target="_blank" rel="nofollow noopener">Human Interface Guidelines - Design - Apple Developer</a></p>
<p>Canva が色々な企業のガイドラインをまとめてくれてた
<a href="https://www.canva.com/ja_jp/learn/50-meticulous-style-guides-every-startup-see-launching/" target="_blank" rel="nofollow noopener">スタートアップ企業が参考にするべき 50 のスタイルガイド</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>VSCodeのRemote Containerという拡張が良さそう</title>
      <link>https://mcho.dev/notes/vscode%E3%81%AEremote-container%E3%81%A8%E3%81%84%E3%81%86%E6%8B%A1%E5%BC%B5%E3%81%8C%E8%89%AF%E3%81%95%E3%81%9D%E3%81%86/</link>
      <pubDate>Thu, 04 Jun 2020 23:02:19 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/vscode%E3%81%AEremote-container%E3%81%A8%E3%81%84%E3%81%86%E6%8B%A1%E5%BC%B5%E3%81%8C%E8%89%AF%E3%81%95%E3%81%9D%E3%81%86/</guid>
      <description><![CDATA[このブログで紹介されてた Docker と Remote Containers での開発環境が最高過ぎる - Sweet Escape Remote - Containers - Visual Studio Marketplace 拡張機能をコンテナで管理できるようで、便利そう]]></description>
      <content:encoded><![CDATA[<p>このブログで紹介されてた
<a href="https://www.keisuke69.net/entry/2020/06/04/145719" target="_blank" rel="nofollow noopener">Docker と Remote Containers での開発環境が最高過ぎる - Sweet Escape</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers" target="_blank" rel="nofollow noopener">Remote - Containers - Visual Studio Marketplace</a></p>
<p>拡張機能をコンテナで管理できるようで、便利そう</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kindleでハイライトした箇所をきれいに抜き出すブックマークレット</title>
      <link>https://mcho.dev/notes/kindle%E3%81%A7%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%97%E3%81%9F%E7%AE%87%E6%89%80%E3%82%92%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AB%E6%8A%9C%E3%81%8D%E5%87%BA%E3%81%99%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88/</link>
      <pubDate>Thu, 04 Jun 2020 13:06:17 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/kindle%E3%81%A7%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%97%E3%81%9F%E7%AE%87%E6%89%80%E3%82%92%E3%81%8D%E3%82%8C%E3%81%84%E3%81%AB%E6%8A%9C%E3%81%8D%E5%87%BA%E3%81%99%E3%83%96%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88/</guid>
      <description><![CDATA[下のページのfor pcをブックマークに登録するとできる kindle highlight js]]></description>
      <content:encoded><![CDATA[<p>下のページの<code>for pc</code>をブックマークに登録するとできる
<a href="https://hilotter.github.io/kindle_highlight_js/" target="_blank" rel="nofollow noopener">kindle highlight js</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Salesforceで開発中のスクラッチ組織を非技術者に簡単に見てもらうためにやったこと</title>
      <link>https://mcho.dev/notes/salesforce%E3%81%A7%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E9%9D%9E%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%AB%E8%A6%8B%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%9F%E3%82%81%E3%81%AB%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</link>
      <pubDate>Thu, 26 Mar 2020 17:13:09 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/salesforce%E3%81%A7%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E9%9D%9E%E6%8A%80%E8%A1%93%E8%80%85%E3%81%AB%E7%B0%A1%E5%8D%98%E3%81%AB%E8%A6%8B%E3%81%A6%E3%82%82%E3%82%89%E3%81%86%E3%81%9F%E3%82%81%E3%81%AB%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</guid>
      <description><![CDATA[この記事は Salesforce 開発者向けブログキャンペーンへのエントリー記事です。 どうしてやろうとしたのか SFDX プロジェクトの開発中に、変更された箇所を確認するための手間を省きたいので、やろうと思いました。 どうやってやるの]]></description>
      <content:encoded><![CDATA[<p>この記事は Salesforce 開発者向けブログキャンペーンへのエントリー記事です。</p>
<h2 id="どうしてやろうとしたのか">どうしてやろうとしたのか</h2>
<p>SFDX プロジェクトの開発中に、変更された箇所を確認するための手間を省きたいので、やろうと思いました。</p>
<h2 id="どうやってやるのか">どうやってやるのか</h2>
<p>プロジェクトの内容が変更されたら、自動的にスクラッチ組織を作成して、Slack に通知する、という流れです。
今回のプロジェクトは GitHub で管理されているため、具体的には以下の流れでやりました。</p>
<ol>
<li>GitHub の master ブランチが更新される</li>
<li>変更されたソースを元にスクラッチ組織を作成/セットアップする</li>
<li>Slack にスクラッチ組織のログイン URL を通知する</li>
</ol>
<p>詳しい手順はそれぞれ、<a href="https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/">GitHubActions でスクラッチ組織を作成する</a>と<a href="https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/">GitHubActions から Slack へメッセージを送信する</a>に書いてあります。この記事は二つの記事をまとめたものになります。</p>
<h2 id="プロジェクトの状態">プロジェクトの状態</h2>
<ul>
<li>GitHub の private リポジトリで管理されている</li>
<li>セットアップはコマンドで完結できる</li>
<li>npm パッケージを含んでいる</li>
</ul>
<h2 id="実現するまでにやったこと">実現するまでにやったこと</h2>
<h3 id="githubactions-でスクラッチ組織を作成する">GitHubActions でスクラッチ組織を作成する</h3>
<p>まずは、GitHubActions で<a href="https://developer.salesforce.com/ja/tools/sfdxcli" target="_blank" rel="nofollow noopener">Salesforce CLI</a>を使えるようにするために <code>package.json</code> の <code>devDependencies</code> に含めます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D sfdx-cli
</code></pre></div><p>次に、 DevHub が有効になっている組織の認証を得る必要があります。コマンドライン上で完結する認証コマンドは<code>force:auth:sfdxurl:store</code>です。これを使うために。<code>Sfdx Auth Url</code>を以下のコマンドで表示、コピーして GitHub の Secrets に登録します。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="c1">## 事前にDevHubを使用する組織にログインしておいてください</span>
sfdx force:org:display --verbose -u ForGitHubAction
</code></pre></div><p>Secrets の登録は GitHub のリポジトリページの Settings &gt; Secrets からできます。</p>
<p>


<picture>
  <img src="/img/2020-03-03-17-01-54.png" alt="Secrets画面" decoding="async" loading="lazy">
</picture>
</p>
<p>最後に、スクラッチ組織を作成する GitHubActions のワークフローを作成して準備は完了です。以下のコードを<code>.github/workflows/create-scratch-org.yml</code>に貼り付けてコミットプッシュします。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織のログインURLをSlackに通知する</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースコードをチェックアウトする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">          </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">          </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            npm-${{ env.app-cache-name }}-
</span><span class="sd">            npm-</span><span class="w">            
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ secrets.DEVHUB_SFDX_URL }} &gt; ./SFDX_AUTH_URL.txt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織にログインする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織を作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">make-login-url</span><span class="w">
</span><span class="w">        </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">          INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">          USER_NAME=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .username))
</span><span class="sd">          PASSWORD=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .password))
</span><span class="sd">          echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">          
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;期限のないログインURLを表示&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ steps.make-login-url.outputs.login-url }}</span><span class="w">
</span></code></pre></div><p>うまくいくと Actions のログにログイン URL が表示されます。</p>
<h3 id="slack-へログイン-url-を通知する">Slack へログイン URL を通知する</h3>
<p>このログイン URL を Slack に通知するために、<a href="https://github.com/pullreminders/slack-action" target="_blank" rel="nofollow noopener">pullreminders/slack-action: GitHub Action for posting Slack messages</a>を使います。セットアップ手順はリンク先にもありますのでそちらも参考にしてください。</p>
<p>それではセットアップしていきます。</p>
<h4 id="slack-app-を作成">Slack App を作成</h4>
<p><a href="https://api.slack.com/apps" target="_blank" rel="nofollow noopener">Slack API: Applications | Slack</a>を開いて<code>Create New App</code>ボタンをクリックしてアプリを作成します。今回は AppName を<code>GABot</code>としました。Slack ワークスペースは適宜追加したい場所を選択してください。</p>
<p>メッセージ送信ができるようにアプリに Bot 用の機能を追加します。アプリの Basic Information ページの上部アコーディオンを開き<code>Bots</code>をクリックすると追加できます。</p>
<p>※画像は設定済みのものになります</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-06-13.png" alt="bot権限を付与" decoding="async" loading="lazy">
</picture>
</p>
<p>Slack ワークスペースに アプリをインストールします。



<picture>
  <img src="/img/2020-03-24-16-08-09.png" alt="Slackワークスペースにインストール" decoding="async" loading="lazy">
</picture>
</p>
<p>※private チェンネルの場合は、チャンネルの詳細タブを開いてそこからアプリをインストールしてください。</p>
<h4 id="slack-app-の-bot-user-oauth-access-token-トークンを-github-に登録">Slack App の Bot User OAuth Access Token トークンを GitHub に登録</h4>
<p>アプリの OAuth &amp; Permissions ページの Bot User OAuth Access Token をコピーして</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-19-59.png" alt="Bot User OAuth Access Token" decoding="async" loading="lazy">
</picture>
</p>
<p>GitHub の Secrets に登録します。</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-22-21.png" alt="GitHubのSecretsに登録" decoding="async" loading="lazy">
</picture>
</p>
<h3 id="github-actions-のワークフローを作成">GitHub Actions のワークフローを作成</h3>
<p>簡単なメッセージを送信するワークフローで試してみます。<code>.github/workflows/hello-slack.yml</code>を作成して、以下をコピペします。コピペしたら一番下の行の<code>\&quot;channel\&quot;:\&quot;GM84QDF1P\&quot;</code>を投稿したいチャンネル ID に書き換えます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GABotでHelloSlack</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hello-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Hello Slack&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@master</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{\&#34;channel\&#34;:\&#34;GM84QDF1P\&#34;,\&#34;text\&#34;:\&#34;Hello world\&#34;}&#39;</span><span class="w">
</span></code></pre></div><p>args に指定するメッセージのフォーマットは<a href="https://api.slack.com/reference/surfaces/formatting" target="_blank" rel="nofollow noopener">Formatting text for app surfaces | Slack</a>を参考に、適宜調節します。<br>
以上で GithubActions から Slack へのメッセージ送信の準備はできました。あとは、master ブランチにコミットして push して、Slack チャンネルにメッセージが投稿されることを確認したら完了です。</p>
<p>


<picture>
  <img src="/img/2020-03-27-15-23-30.png" alt="Hello Slack" decoding="async" loading="lazy">
</picture>
</p>
<h2 id="完成したワークフロー">完成したワークフロー</h2>
<p>上記二つのワークフローが、うまく動くことを確かめたら、二つをマージします。完成したワークフローは以下になります、ファイル名をわかりやすく<code>.github/workflows/create-scratch-org-and-notification-to-slack.yml</code>として保存しました。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">スクラッチ組織のログインURLをSlackに通知する</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">create-scratch-org-and-notification-to-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースコードをチェックアウトする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;node_modulesのキャッシュがあったら使う&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">app-cache-npm</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/cache@v1</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">node_modules</span><span class="w">
</span><span class="w">          </span><span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">npm-${{ hashFiles(&#39;**/package-lock.json&#39;) }}</span><span class="w">
</span><span class="w">          </span><span class="nt">restore-keys</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">            npm-${{ env.app-cache-name }}-
</span><span class="sd">            npm-</span><span class="w">            
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;npm ciを実行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">steps.app-cache-npm.outputs.cache-hit != &#39;true&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npm ci</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Secretsに登録したSfdx Auth Urlをファイルへ出力&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">echo ${{ secrets.DEVHUB_SFDX_URL }} &gt; ./SFDX_AUTH_URL.txt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Salesforce組織にログインする&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:auth:sfdxurl:store -f ./SFDX_AUTH_URL.txt -d</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;スクラッチ組織を作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:org:create -f config/project-scratch-def.json -a TestScratchOrg -d 1</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ソースをプッシュ&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:source:push -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;パスワードを発行&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">npx sfdx force:user:password:generate -u TestScratchOrg</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ID/PWからログインURLを作成する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">make-login-url</span><span class="w">
</span><span class="w">        </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">          ORG_INFO=$(npx sfdx force:org:display -u TestScratchOrg --json | jq .result)
</span><span class="sd">          INSTANCE_URL=$(echo $ORG_INFO | jq .instanceUrl)
</span><span class="sd">          USER_NAME=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .username))
</span><span class="sd">          PASSWORD=$(python3 -c &#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34; $(echo $ORG_INFO | jq .password))
</span><span class="sd">          echo &#34;##[set-output name=login-url;]$(echo ${INSTANCE_URL}?un=${USER_NAME}\&amp;pw=${PASSWORD})&#34;</span><span class="w">          
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ログインURLをスラックに通知する&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@v1.0.7</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{
</span><span class="s1">            \&#34;channel\&#34;: \&#34;GM84QDF1P\&#34;,
</span><span class="s1">            \&#34;attachments\&#34;: [
</span><span class="s1">              {
</span><span class="s1">                \&#34;fallback\&#34;: \&#34;メッセージの投稿に失敗しました...\&#34;,
</span><span class="s1">                \&#34;color\&#34;: \&#34;#36a64f\&#34;,
</span><span class="s1">                \&#34;title\&#34;: \&#34;masterブランチが更新されました！\&#34;,
</span><span class="s1">                \&#34;text\&#34;: \&#34;下記URLからスクラッチ組織にログインすることが出来ます。\n${{ steps.make-login-url.outputs.login-url }}\&#34;
</span><span class="s1">              }
</span><span class="s1">            ]
</span><span class="s1">          }&#39;</span><span class="w">
</span></code></pre></div><p>これをコミットして master ブランチ更新して push すると、ログイン URL を含んだ以下のメッセージが指定の Slack チャンネルに送られてくれば完成です！</p>
<p>


<picture>
  <img src="/img/2020-03-27-15-58-51.png" alt="ログインURLをSlackに通知" decoding="async" loading="lazy">
</picture>
</p>
<h2 id="終わり">終わり</h2>
<p>以上です、Slack からこのワークフローをトリガーできたりしたら更に便利になりそうです。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HugoでYoutube等を埋め込みをするShortcodes</title>
      <link>https://mcho.dev/notes/hugo%E3%81%A7%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E3%82%92%E3%81%99%E3%82%8Bshortcodes/</link>
      <pubDate>Wed, 25 Mar 2020 06:35:05 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/hugo%E3%81%A7%E5%9F%8B%E3%82%81%E8%BE%BC%E3%81%BF%E3%82%92%E3%81%99%E3%82%8Bshortcodes/</guid>
      <description><![CDATA[ここにある。 Shortcodes | Hugo]]></description>
      <content:encoded><![CDATA[<p>ここにある。
<a href="https://gohugo.io/content-management/shortcodes/" target="_blank" rel="nofollow noopener">Shortcodes | Hugo</a></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/w7Ft2ymGmfc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>GitHub Actionsのubuntu-latestでURLEncode</title>
      <link>https://mcho.dev/notes/github-actions%E3%81%AEubuntu-latest%E3%81%A7urlencode/</link>
      <pubDate>Wed, 18 Mar 2020 15:27:50 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/github-actions%E3%81%AEubuntu-latest%E3%81%A7urlencode/</guid>
      <description><![CDATA[json から値を抜きだして URL を作りたかったので結局こんな感じになった USER_NAME=$(python3 -c &amp;#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&amp;#34; $(echo $HOGE_JSON | jq .huga))&amp;#39; ENCODED_URL=$(echo https://example.com?un=${USER_NAME}) $(echo $HOGE)は引数に渡るときに&amp;quot;hoge&amp;quot;となるのでsys.argv[1][1:-1]]></description>
      <content:encoded><![CDATA[<p>json から値を抜きだして URL を作りたかったので結局こんな感じになった</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="nv">USER_NAME</span><span class="o">=</span><span class="k">$(</span>python3 -c <span class="s2">&#34;import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1][1:-1]))&#34;</span> <span class="k">$(</span><span class="nb">echo</span> <span class="nv">$HOGE_JSON</span> <span class="p">|</span> jq .huga<span class="k">))</span><span class="err">&#39;</span>
<span class="nv">ENCODED_URL</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> https://example.com?un<span class="o">=</span><span class="si">${</span><span class="nv">USER_NAME</span><span class="si">}</span><span class="k">)</span>
</code></pre></div><p><code>$(echo $HOGE)</code>は引数に渡るときに<code>&quot;hoge&quot;</code>となるので<code>sys.argv[1][1:-1]</code>で両端のダブルクオートを切り取ってる
もっといいやり方がありそうだけどとりあえずこれで</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>@angular-eslint/angular-eslintでAngularのLinterをTSLintからESLintに置き換えてみた</title>
      <link>https://mcho.dev/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 16 Mar 2020 12:06:21 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/angular-eslint%E3%81%A7angular%E3%81%AElinter%E3%82%92tslint%E3%81%8B%E3%82%89eslint%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description><![CDATA[モチベーション 各所で TSLint から ESLint の移行が進んでるのと、VSCode の ESLint フォーマッターを使いたかった。 移行手順 ng newしたところから始めます。AngularCLI のバージョンは9.0.6でした。 パッケージの]]></description>
      <content:encoded><![CDATA[<h2 id="モチベーション">モチベーション</h2>
<p>各所で TSLint から ESLint の移行が進んでるのと、VSCode の ESLint フォーマッターを使いたかった。</p>
<h2 id="移行手順">移行手順</h2>
<p><code>ng new</code>したところから始めます。AngularCLI のバージョンは<code>9.0.6</code>でした。</p>
<h3 id="パッケージのインストール">パッケージのインストール</h3>
<p>まず、<code>eslint</code>と<code>@angular-eslint</code>関連のパッケージをインストールします。
<a href="https://github.com/angular-eslint/angular-eslint" target="_blank" rel="nofollow noopener">angular-eslint/angular-eslint: Monorepo for all the tooling related to using ESLint with Angular</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D eslint <span class="se">\
</span><span class="se"></span>  @angular-eslint/builder <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin <span class="se">\
</span><span class="se"></span>  @angular-eslint/template-parser <span class="se">\
</span><span class="se"></span>  @angular-eslint/eslint-plugin-template
</code></pre></div><h3 id="コマンドと-eslint-の設定を修正">コマンドと ESLint の設定を修正</h3>
<p>前述したリポジトリに手順もありますが、各設定ファイルのサンプルがあったので、それを参考に<code>angular.json</code>を修正、**<code>.eslintrc.js</code>**を追加しました。angular.json の差分はこんな感じ<br>



<picture>
  <img src="/img/2020-03-16-12-41-16.png" alt="angular.jsonの差分" decoding="async" loading="lazy">
</picture>
</p>
<p><code>.eslint.js</code>のサンプルは
<a href="https://github.com/angular-eslint/angular-eslint/blob/master/packages/integration-tests/fixtures/angular-cli-workspace/.eslintrc.js" target="_blank" rel="nofollow noopener">ここ</a>からいただきました。</p>
<p>また、この<code>.eslint.js</code>を使うために、<code>@typescript-eslint</code>関連のパッケージが必要なので以下のコマンドでインストールします。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser
</code></pre></div><p>ここまでで<code>ng lint</code>は動くようになるはずです。手元の環境では、<code>app.component.spec.ts</code>でクオートのエラーがでました。</p>
<h2 id="vscode-でも動かしてみる">VSCode でも動かしてみる</h2>
<p>設定されてるルールが適用されてるか見てみます。サンプルにあった<code>'@typescript-eslint/no-non-null-assertion': 'error'</code>で試してみます。</p>
<p>


<picture>
  <img src="/img/2020-03-16-18-37-21.png" alt="&#39;@typescript-eslint/no-non-null-assertion&#39;: &lsquo;error&rsquo;" decoding="async" loading="lazy">
</picture>
</p>
<p>無事 Lint されていました。また、画像や動画をとっていないですが、<code>ESLint: Fix all auto-fixable Problems</code>も効きました。</p>
<h2 id="終わり">終わり</h2>
<p>Angular 本体の ESLint 対応も待ち遠しいですが、<code>@angular-eslint/angular-eslint</code>はルールも順次対応していくようなので、とりあえずこちらで良さそうですね</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Auraコンポーネントから特定フィールドのPickListValuesを取得する</title>
      <link>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 09 Mar 2020 15:54:48 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/aura%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%8B%E3%82%89%E7%89%B9%E5%AE%9A%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AEpicklistvalues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[やりたいこと Aura コンポーネントからオブジェクトの PickList フィールドの PickListValues を取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。 取得する ui-api か Apex コントローラーで取得できそう。ui-api は試し]]></description>
      <content:encoded><![CDATA[<h2 id="やりたいこと">やりたいこと</h2>
<p>Aura コンポーネントからオブジェクトの PickList フィールドの PickListValues を取得したい。具体的には取引先(個人)の敬称フィールドの選択肢を取得したい。</p>
<h2 id="取得する">取得する</h2>
<p>ui-api か Apex コントローラーで取得できそう。ui-api は試したら CSP が必要だったので、Apex コントローラーで取得する。</p>
<p>単純にやると、<code>Account.Salutation.getDescribe().getPicklistValues()</code>でできる。</p>
<p>汎用的にするには</p>
<pre tabindex="0"><code class="language-apex" data-lang="apex">SObject sObj = (SObject)Type.forName(sObjectName).newInstance();
Schema.DescribeSObjectResult describeSObj = sObj.getSObjectType().getDescribe();
Schema.SObjectField field = describeSObj.fields.getMap().get(fieldName);
field.getDescribe().getPicklistValues();
</code></pre><p>という感じになる。<code>Schema.DescribeSObjectResult</code>の<code>fields.getMap().get(fieldName)</code>で<code>SObjectField</code>を取得するところが味噌っぽい</p>
<h2 id="参考">参考</h2>
<p><a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/js_api_calls_platform.htm" target="_blank" rel="nofollow noopener">Making API Calls from Components | Lightning Aura Components Developer Guide | Salesforce Developers</a><br>
<a href="https://developer.salesforce.com/docs/atlas.ja-jp.apexcode.meta/apexcode/apex_methods_system_sobject_describe.htm" target="_blank" rel="nofollow noopener">DescribeSObjectResult クラス | Apex 開発者ガイド | Salesforce Developers</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>GitHubActionsからSlackへメッセージを送信する</title>
      <link>https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</link>
      <pubDate>Fri, 06 Mar 2020 17:34:24 +0900</pubDate>
      
      <guid>https://mcho.dev/notes/githubactions%E3%81%8B%E3%82%89slack%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B/</guid>
      <description><![CDATA[どうしてやるの GitHubActions で Salesforce のスクラッチ組織を作成するのワークフローから Slack にログイン URL を送りたかった。 なにを使うか pullreminders/slack-action: GitHub Action for posting Slack messagesを使うことにした。 今気づいたんですが、これ PullPanda のリポジトリだ セットア]]></description>
      <content:encoded><![CDATA[<h2 id="どうしてやるの">どうしてやるの</h2>
<ul>
<li><a href="https://mcho.dev/notes/githubactions%E3%81%A7%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E7%B5%84%E7%B9%94%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/">GitHubActions で Salesforce のスクラッチ組織を作成する</a>のワークフローから Slack にログイン URL を送りたかった。</li>
</ul>
<h2 id="なにを使うか">なにを使うか</h2>
<p><a href="https://github.com/pullreminders/slack-action" target="_blank" rel="nofollow noopener">pullreminders/slack-action: GitHub Action for posting Slack messages</a>を使うことにした。<br>
今気づいたんですが、これ PullPanda のリポジトリだ</p>
<h2 id="セットアップ">セットアップ</h2>
<p>上記リポジトリの手順通り進める。流れは</p>
<ol>
<li>Slack App を作成</li>
<li>Slack App トークンを GitHub に登録</li>
<li>GitHub Actions のワークフローを作成</li>
</ol>
<p>です、詳しくは前述したリポジトリの方見てください。</p>
<h2 id="セットアップしていく">セットアップしていく</h2>
<h3 id="1-slack-app-を作成">1. Slack App を作成</h3>
<p><a href="https://api.slack.com/apps" target="_blank" rel="nofollow noopener">Slack API: Applications | Slack</a>を開いて<code>Create New App</code>ボタンをクリックしてアプリを作成します。今回は AppName を<code>GABot</code>としました。Slack ワークスペースは追加したい場所を選択してください。</p>
<p>メッセージ送信ができるようにアプリに Bot 用の機能を追加します。アプリの Basic Information ページの上部アコーディオンを開き<code>Bots</code>をクリックすると追加できます。</p>
<p>※画像は設定済みのものになります</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-06-13.png" alt="bot権限を付与" decoding="async" loading="lazy">
</picture>
</p>
<p>Slack ワークスペースに アプリをインストールします。



<picture>
  <img src="/img/2020-03-24-16-08-09.png" alt="Slackワークスペースにインストール" decoding="async" loading="lazy">
</picture>
</p>
<p>※private チェンネルの場合は、チャンネルの詳細タブを開いてそこからアプリをインストールしてください。</p>
<h3 id="2-slack-app-の-bot-user-oauth-access-token-を-github-に登録">2. Slack App の Bot User OAuth Access Token を GitHub に登録</h3>
<p>アプリの OAuth &amp; Permissions ページの Bot User OAuth Access Token をコピーして</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-19-59.png" alt="Bot User OAuth Access Token" decoding="async" loading="lazy">
</picture>
</p>
<p>GitHub の Secrets に登録します。</p>
<p>


<picture>
  <img src="/img/2020-03-24-16-22-21.png" alt="GitHubのSecretsに登録" decoding="async" loading="lazy">
</picture>
</p>
<h3 id="3-github-actions-のワークフローを作成">3. GitHub Actions のワークフローを作成</h3>
<p>簡単なメッセージを送信するワークフローで試してみます。<code>.github/workflows</code>に <code>hello-slack.yml</code>を作成して、以下をコピペします。コピペしたら一番下の行の<code>\&quot;channel\&quot;:\&quot;GM84QDF1P\&quot;</code>を投稿したいチャンネル ID に書き換えます。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">GABotでHelloSlack</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">hello-slack</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Hello Slack&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">SLACK_BOT_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GA_BOT_TOKEN }}</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">pullreminders/slack-action@master</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{\&#34;channel\&#34;:\&#34;GM84QDF1P\&#34;,\&#34;text\&#34;:\&#34;Hello Slack\&#34;}&#39;</span><span class="w">
</span></code></pre></div><p>以上で GithubActions から Slack へのメッセージ送信の準備はできました。あとは、master ブランチにコミットして push して、Slack チャンネルにメッセージが投稿されることを確認したら完了です。</p>
<h2 id="終わり">終わり</h2>
<p>あとは色々組み合わせよう</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>